{
  "openapi": "3.1.0",
  "info": {
    "title": "MyTrip - Road Trip Planner API",
    "description": "\n    A comprehensive road trip planning API with intelligent route optimization, enhanced error handling, and user authentication.\n\n    ## üöÄ Features\n\n    - ‚úÖ **Trip Management**: Create, view, and manage road trips with enhanced validation\n    - ‚úÖ **Days Organization**: Day-by-day trip planning with automatic date calculation\n    - ‚úÖ **Stops Management**: Comprehensive stops system with 12 categories and detailed planning\n    - ‚úÖ **Intelligent Routing**: Hybrid GraphHopper routing with automatic fallback\n    - ‚úÖ **Places API with Type-ahead**: Fast, accurate search for addresses and POIs with real-time suggestions\n    - ‚úÖ **Enhanced Error Handling**: Actionable error messages with recovery guidance\n    - ‚úÖ **Place Search Caching**: Aggressive caching for improved performance\n    - ‚úÖ **Rate Limit Management**: Exponential backoff and circuit breaker patterns\n    - ‚úÖ **Modern Pagination**: Navigation links and comprehensive metadata\n    - ‚úÖ **Bulk Operations**: Efficient batch processing for multiple resources\n    - ‚úÖ **Smart Sequence Management**: Conflict-free ordering for collaborative editing\n    - ‚úÖ **Advanced Filtering**: Multi-attribute filtering and flexible sorting\n    - ‚úÖ **Input Validation**: Sanitization and security protection\n    - ‚úÖ **User Authentication**: Secure Bearer token authentication\n    - ‚úÖ **Collaborative Planning**: Multi-user trip management\n\n    ## üõ°Ô∏è Recent Improvements\n\n    ### Enhanced Trip Creation\n    - **Input Sanitization**: Removes dangerous characters to prevent injection attacks\n    - **Smart Validation**: Length limits, date range checks, meaningful content validation\n    - **Enhanced Response**: Provides contextual next steps and planning suggestions\n    - **Better Onboarding**: Guides users through the trip creation process\n\n    ### Intelligent Routing System\n    - **Hybrid Approach**: Self-hosted GraphHopper with cloud fallback\n    - **Geographic Coverage**: Primary coverage for Israel/Palestine, global fallback\n    - **Rate Limit Protection**: Exponential backoff prevents API quota exhaustion\n    - **Circuit Breaker**: Skips unnecessary computations for out-of-bounds coordinates\n    - **Enhanced Error Messages**: Specific guidance for different error scenarios\n\n    ### Performance Optimizations\n    - **Place Search Caching**: 5-minute TTL cache for faster repeated searches\n    - **Resource Management**: Shared HTTP clients prevent memory leaks\n    - **Smart Bounds Checking**: Reduces unnecessary external API calls\n    - **Matrix Optimization**: Efficient distance matrix computation with fallbacks\n    - **Modern Pagination**: Navigation links reduce client-side URL construction\n    - **Bulk Operations**: Process up to 100 items in single API calls\n\n    ## Authentication\n\n    This API uses Bearer token authentication. To get started:\n\n    1. **Login** using the `/auth/login` endpoint with your email address\n    2. **Copy the access_token** from the response\n    3. **Click the \"Authorize\" button** below and enter: `Bearer <your_token>`\n    4. **Use protected endpoints** - they will automatically include your authentication\n\n    ### Quick Start Example:\n\n    ```bash\n    # 1. Login to get your token\n    curl -X POST \"http://localhost:8100/auth/login\" \\\n         -H \"Content-Type: application/json\" \\\n         -d '{\"email\": \"adar.bahar@gmail.com\"}'\n\n    # 2. Create a new trip (start_date is optional)\n    curl -X POST \"http://localhost:8100/trips/\" \\\n         -H \"Authorization: Bearer fake_token_YOUR_TOKEN_HERE\" \\\n         -H \"Content-Type: application/json\" \\\n         -d '{\"title\": \"My Road Trip\", \"destination\": \"California, USA\"}'\n\n    # 3. List your trips\n    curl -X GET \"http://localhost:8100/trips/\" \\\n         -H \"Authorization: Bearer fake_token_YOUR_TOKEN_HERE\"\n    ```\n\n    ## üó∫Ô∏è Routing & Navigation\n\n    ### Intelligent Routing System\n    The API provides sophisticated route computation with multiple fallback strategies:\n\n    #### Primary Routing (Self-hosted GraphHopper)\n    - **Coverage**: Israel and Palestine region\n    - **Performance**: Fast, no rate limits\n    - **Features**: Turn-by-turn directions, route optimization\n\n    #### Fallback Routing (GraphHopper Cloud)\n    - **Coverage**: Global\n    - **Usage**: Automatic fallback for out-of-bounds coordinates\n    - **Rate Limiting**: 3 calls per minute with exponential backoff\n\n    #### Route Computation Features\n    - **Route Optimization**: Traveling salesman optimization for multiple stops\n    - **Multiple Profiles**: Car, motorcycle, bicycle support\n    - **Avoid Options**: Tolls, highways, ferries\n    - **Matrix Computation**: Distance/time matrices for optimization\n    - **Error Recovery**: Graceful degradation with helpful error messages\n\n    #### Error Handling\n    - **Rate Limit (429)**: Exponential backoff with clear retry guidance\n    - **Out of Bounds (400)**: Specific advice for geographic limitations\n    - **Service Errors (500)**: Actionable steps for recovery\n    - **Circuit Breaker**: Prevents cascading failures\n\n    ## üöó Trip Creation\n\n    ### Enhanced Trip Creation\n    When creating trips, the API now provides enhanced validation and guidance:\n\n    #### Required Fields\n    - **title**: 1-255 characters (sanitized for security)\n    - **destination**: Optional, max 255 characters\n    - **start_date**: Optional, format YYYY-MM-DD (validated against future limits)\n\n    #### Auto-Generated Fields\n    - **slug**: URL-friendly identifier from title\n    - **status**: Defaults to \"draft\"\n    - **next_steps**: Contextual guidance for trip planning\n    - **suggestions**: Time-based planning advice\n\n    #### Enhanced Response\n    ```json\n    {\n      \"trip\": { ... },\n      \"next_steps\": [\n        \"Set your trip start date to help with planning\",\n        \"Create your first day in Jerusalem\"\n      ],\n      \"suggestions\": {\n        \"planning_timeline\": \"You have plenty of time to plan...\",\n        \"popular_destinations\": [...]\n      }\n    }\n    ```\n\n    ## üìÑ Modern Pagination\n\n    ### Enhanced Pagination System\n    All list endpoints now support modern pagination with navigation links:\n\n    #### Standard Pagination Parameters\n    - **page**: Page number (1-based, default: 1)\n    - **size**: Items per page (1-100, default: 20)\n    - **format**: Response format - 'modern' (default) or 'legacy'\n\n    #### Modern Response Format\n    ```json\n    {\n      \"data\": [...],\n      \"meta\": {\n        \"current_page\": 1,\n        \"per_page\": 20,\n        \"total_items\": 45,\n        \"total_pages\": 3,\n        \"has_next\": true,\n        \"has_prev\": false,\n        \"from_item\": 1,\n        \"to_item\": 20\n      },\n      \"links\": {\n        \"self\": \"http://localhost:8000/trips?page=1&size=20\",\n        \"first\": \"http://localhost:8000/trips?page=1&size=20\",\n        \"last\": \"http://localhost:8000/trips?page=3&size=20\",\n        \"next\": \"http://localhost:8000/trips?page=2&size=20\",\n        \"prev\": null\n      }\n    }\n    ```\n\n    #### Navigation Benefits\n    - **Self-contained URLs**: No client-side URL construction needed\n    - **Filter Preservation**: Query parameters maintained across pages\n    - **RESTful Navigation**: Standard first/last/next/prev links\n    - **Metadata Rich**: Comprehensive pagination information\n\n    #### Backward Compatibility\n    Legacy format available via `format=legacy` parameter for existing clients.\n\n    ## üîÑ Bulk Operations\n\n    ### Efficient Batch Processing\n    All major resources support bulk operations for improved efficiency:\n\n    #### Supported Operations\n    - **Bulk Delete**: Remove multiple resources in a single transaction\n    - **Bulk Update**: Update multiple resources with field-level validation\n    - **Bulk Reorder**: Reposition multiple items with sequence validation\n\n    #### Bulk Delete Features\n    ```json\n    {\n      \"ids\": [\"id1\", \"id2\", \"id3\"],\n      \"force\": false\n    }\n    ```\n    - **Transactional Safety**: All-or-nothing deletion\n    - **Permission Validation**: Per-resource access control\n    - **Cascade Handling**: Automatic cleanup of dependent resources\n    - **Audit Logging**: Comprehensive operation tracking\n\n    #### Bulk Update Features\n    ```json\n    {\n      \"updates\": [\n        {\"id\": \"id1\", \"data\": {\"field\": \"value\"}},\n        {\"id\": \"id2\", \"data\": {\"field\": \"value\"}}\n      ]\n    }\n    ```\n    - **Field Filtering**: Only allowed fields can be updated\n    - **Validation Hooks**: Pre/post-update processing\n    - **Partial Success**: Individual item results\n    - **Error Isolation**: Failed items don't affect successful ones\n\n    #### Bulk Reorder Features\n    ```json\n    {\n      \"items\": [\n        {\"id\": \"id1\", \"seq\": 1},\n        {\"id\": \"id2\", \"seq\": 2}\n      ]\n    }\n    ```\n    - **Sequence Validation**: No duplicate positions\n    - **Scope Awareness**: Reordering within specific contexts\n    - **Automatic Route Updates**: Triggers recomputation when needed\n\n    #### Performance Benefits\n    - **Reduced API Calls**: Process up to 100 items per request\n    - **Database Efficiency**: Single transaction for multiple operations\n    - **Network Optimization**: Fewer round trips\n    - **UI Responsiveness**: Batch operations for drag-and-drop interfaces\n\n    #### Available Endpoints\n    - **Trips**: `DELETE /trips/bulk`, `PATCH /trips/bulk`\n    - **Days**: `DELETE /days/bulk`, `PATCH /days/bulk`\n    - **Stops**: `DELETE /stops/bulk`, `PATCH /stops/bulk`, `POST /stops/bulk/reorder`\n\n    ## üî¢ Smart Sequence Management\n\n    ### Conflict-Free Ordering System\n    Eliminates manual sequence number conflicts in collaborative environments:\n\n    #### Intelligent Operations\n    ```json\n    {\n      \"operation\": \"move_up\",           // Move item up one position\n      \"operation\": \"move_down\",         // Move item down one position\n      \"operation\": \"move_to_top\",       // Move to first position\n      \"operation\": \"move_to_bottom\",    // Move to last position\n      \"operation\": \"insert_after\",      // Insert after target item\n      \"operation\": \"insert_before\",     // Insert before target item\n      \"operation\": \"move_to_position\"   // Move to specific position\n    }\n    ```\n\n    #### Collaborative Benefits\n    - **Conflict Resolution**: Automatic sequence number management\n    - **Atomic Operations**: All changes in single database transaction\n    - **Multi-User Safe**: Works correctly with concurrent edits\n    - **Auto-Route Updates**: Triggers route recomputation when needed\n\n    #### Available Endpoints\n    - **Stops**: `POST /stops/{stop_id}/sequence` - Smart stop reordering\n    - **Days**: `POST /days/{day_id}/sequence` - Smart day reordering (planned)\n\n    ## üîç Advanced Filtering & Sorting\n\n    ### Multi-Attribute Query System\n    Flexible filtering and sorting across all list endpoints:\n\n    #### Filter Operators\n    - **Comparison**: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`\n    - **Text**: `contains`, `starts_with`, `ends_with`\n    - **Lists**: `in`, `not_in`\n    - **Null checks**: `is_null`, `is_not_null`\n    - **Ranges**: `between`\n    - **Pattern**: `regex`\n\n    #### Filter Syntax\n    ```\n    field:operator:value,field2:operator2:value2\n\n    Examples:\n    - status:eq:active,created_at:gte:2024-01-01\n    - stop_type:in:food|attraction,duration_min:gte:30\n    - title:contains:jerusalem,date:between:2024-01-01|2024-12-31\n    ```\n\n    #### Sort Syntax\n    ```\n    field:direction,field2:direction2\n\n    Examples:\n    - created_at:desc,title:asc\n    - seq:asc,duration_min:desc\n    ```\n\n    #### Enhanced List Endpoints\n    - **Trips**: Filter by status, destination, date range, publication status\n    - **Days**: Filter by date range, status, title search\n    - **Stops**: Filter by type, duration range, notes search\n    - **Places**: Filter by type, location, name search\n\n    #### Search Functionality\n    - **Global search**: Search across multiple fields simultaneously\n    - **Range filters**: Date ranges, duration ranges, numeric ranges\n    - **Multi-value filters**: Select multiple statuses, types, etc.\n\n    ## üîç Places API with Type-ahead Suggestions\n\n    ### Advanced Address & POI Search\n    The API provides fast, accurate search for addresses and points of interest with real-time type-ahead suggestions:\n\n    #### Core Features\n    - **Type-ahead Suggestions**: Real-time predictions while typing (150-250ms debounce recommended)\n    - **Geographic Coordinates**: WGS-84 decimal degrees for all results\n    - **Session Management**: Session tokens for grouping related requests\n    - **Proximity Bias**: Location-based result prioritization\n    - **Category Filtering**: Filter by hotel, restaurant, museum, address, etc.\n    - **Text Highlighting**: Highlighted matching text for UI rendering\n\n    #### API Endpoints\n    - **GET /places/v1/places/suggest**: Lightweight type-ahead suggestions\n    - **GET /places/v1/places/search**: Full search with comprehensive details\n    - **GET /places/v1/places/{id}**: Detailed place information\n    - **GET /places/v1/places/**: Health check endpoint\n\n    #### Type-ahead Suggestions Parameters\n    - **q**: Search query (required, 1-256 characters)\n    - **session_token**: Session token for grouping requests (required)\n    - **lat/lng**: Optional proximity coordinates for bias\n    - **radius**: Search radius in meters (1-50,000)\n    - **bbox**: Bounding box filter (minLon,minLat,maxLon,maxLat)\n    - **countries**: Comma-separated ISO-3166-1 alpha-2 codes\n    - **categories**: Comma-separated category filters\n    - **lang**: BCP-47 language code (default: en)\n    - **limit**: Maximum results (1-20, default: 8)\n\n    #### Full Search Parameters\n    All suggestion parameters plus:\n    - **page_token**: Pagination token for next page\n    - **offset**: Result offset for pagination\n    - **open_now**: Filter for currently open POIs\n    - **sort**: Sort order (relevance, distance, rating, popularity)\n\n    #### Example Type-ahead Request\n    ```\n    GET /places/v1/places/suggest?q=montef&lat=32.07&lng=34.78&radius=5000&countries=IL&categories=hotel,restaurant&lang=en&limit=8&session_token=st_123\n    ```\n\n    #### Example Response\n    ```json\n    {\n      \"session_token\": \"st_123\",\n      \"suggestions\": [\n        {\n          \"id\": \"poi_hotel_montefiore\",\n          \"name\": \"Hotel Montefiore\",\n          \"highlighted\": \"Hotel <b>Montef</b>iore\",\n          \"formatted_address\": \"36 Montefiore St, Tel Aviv-Yafo, Israel\",\n          \"types\": [\"lodging\", \"poi\"],\n          \"center\": {\"lat\": 32.0643, \"lng\": 34.7748},\n          \"distance_m\": 850,\n          \"confidence\": 0.91,\n          \"source\": \"internal\"\n        }\n      ]\n    }\n    ```\n\n    #### Performance & Reliability\n    - **Rate Limiting**: 50 RPS for suggestions, 30 RPS for search\n    - **Caching**: Multi-layer caching with 5-minute TTL\n    - **Error Handling**: Comprehensive error responses with retry guidance\n    - **Input Validation**: Query length limits and sanitization\n    - **Request Tracking**: Unique request IDs for debugging\n\n    #### Text Matching & Ranking\n    - **Prefix Matching**: Highest score for exact prefix matches\n    - **Infix Matching**: Partial word and substring matching\n    - **Proximity Boost**: Distance-based ranking enhancement\n    - **Category Boost**: Higher scores for category-specific matches\n    - **Popularity Signals**: Historical usage and rating-based ranking\n\n    ### Legacy Place Search & Geocoding\n    The API also maintains backward compatibility with existing place search:\n\n    #### Legacy Features\n    - **External Integration**: MapTiler geocoding API\n    - **Aggressive Caching**: 5-minute TTL for improved performance\n    - **Smart Ranking**: Relevance-based result ordering\n    - **Proximity Search**: Location-based result prioritization\n\n    #### Legacy Parameters\n    - **query**: Search term (min 2 characters)\n    - **lat/lon**: Optional proximity coordinates\n    - **radius**: Search radius in meters (default: 50km)\n    - **limit**: Max results (1-50, default: 10)\n\n    ## üõë Stops Management\n\n    The stops system allows detailed itinerary planning with:\n\n    ### Stop Types (12 categories):\n    - üè® **Accommodation**: Hotels, B&Bs, camping\n    - üçΩÔ∏è **Food**: Restaurants, cafes, bars\n    - üéØ **Attraction**: Museums, landmarks, tours\n    - ‚õΩ **Gas**: Fuel stations, charging points\n    - üõçÔ∏è **Shopping**: Stores, markets, outlets\n    - üöó **Transport**: Airports, train stations\n    - üè• **Services**: Banks, hospitals, repairs\n    - üå≤ **Nature**: Parks, trails, beaches\n    - üé≠ **Culture**: Theaters, galleries, events\n    - üåô **Nightlife**: Bars, clubs, entertainment\n    - üìç **Other**: Custom locations\n\n    ### Stop Features:\n    - **Time Management**: Arrival/departure times, duration estimates\n    - **Priority Levels**: Must see (1) to Optional (5)\n    - **Booking Info**: Confirmation numbers, status tracking\n    - **Cost Tracking**: Estimated and actual expenses\n    - **Contact Details**: Phone, website, notes\n    - **Flexible Ordering**: Drag-and-drop reordering within days\n\n    ### Stop Operations:\n    - Create, read, update, delete stops\n    - Reorder stops within days\n    - Filter by type and priority\n    - Include place information\n    - Trip-wide stops summary\n\n    ## üö® Error Handling & Recovery\n\n    ### Enhanced Error Responses\n    The API provides detailed error information with actionable recovery steps:\n\n    #### Rate Limiting (429)\n    ```json\n    {\n      \"detail\": \"Routing temporarily unavailable due to rate limits\",\n      \"error_type\": \"RATE_LIMIT\",\n      \"retry_after\": 60,\n      \"suggestions\": [\n        \"Wait 1-2 minutes before trying again\",\n        \"Consider using fewer stops\",\n        \"Try again during off-peak hours\"\n      ]\n    }\n    ```\n\n    #### Geographic Coverage (400)\n    ```json\n    {\n      \"detail\": \"Coordinates are outside supported region\",\n      \"error_type\": \"OUT_OF_BOUNDS\",\n      \"supported_regions\": [\"Israel\", \"Palestine\"],\n      \"suggestions\": [\n        \"Try using nearby major cities\",\n        \"Check if all locations are in the same region\",\n        \"Consider splitting international trips\"\n      ]\n    }\n    ```\n\n    #### Service Errors (500)\n    ```json\n    {\n      \"detail\": \"Routing service temporarily unavailable\",\n      \"error_type\": \"SERVICE_ERROR\",\n      \"suggestions\": [\n        \"Try again in a few moments\",\n        \"Check that all locations are valid\",\n        \"Contact support if problem persists\"\n      ]\n    }\n    ```\n\n    ### Circuit Breaker Pattern\n    - **Automatic Protection**: Prevents cascading failures\n    - **Smart Backoff**: Exponential delays for failed services\n    - **Resource Conservation**: Skips unnecessary API calls\n    - **Graceful Degradation**: Maintains functionality during outages\n\n    **Development Note**: This is a development authentication system. Any valid email address can be used to login and will automatically create a user account.\n    ",
    "version": "1.0.0",
    "contact": {
      "name": "MyTrip API Support",
      "email": "support@mytrip.com",
      "url": "https://github.com/AdarBahar/MyTrip"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Health check endpoint with system status information.\n\nReturns:\n- **status**: Service health status\n- **service**: Service name and version\n- **routing_mode**: Current routing configuration (selfhost/cloud)\n- **use_cloud_matrix**: Whether cloud matrix computation is enabled\n\nThis endpoint is useful for:\n- Monitoring service availability\n- Checking routing configuration\n- Debugging connectivity issues\n- Load balancer health checks",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "description": "Root endpoint",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/ai/route-optimize": {
      "post": {
        "tags": [
          "ai"
        ],
        "summary": "AI-powered route optimization",
        "description": "**AI Route Optimization**\n\n    Use OpenAI's GPT models to analyze and optimize route data with natural language instructions.\n\n    **Features:**\n    - ‚úÖ Natural language prompts for route optimization\n    - ‚úÖ Flexible data input (string or structured)\n    - ‚úÖ Customizable response format\n    - ‚úÖ Support for fixed stops and constraints\n    - ‚úÖ Comprehensive error handling\n\n    **Use Cases:**\n    - Optimize stop order based on custom criteria\n    - Analyze route efficiency and suggest improvements\n    - Handle complex routing constraints with natural language\n    - Generate human-readable route summaries\n\n    **Example Request:**\n    ```json\n    {\n      \"prompt\": \"Create the right order of the route, assuming that start and end are book-endings, and stops are ordered in the optimized route. If a stop is marked as fixed, order for that specific stop should not change.\",\n      \"data\": \"Type | Location | Address\\nStart | 32.1878296, 34.9354013 | ◊û◊ô◊õ◊ú, ◊õ◊§◊® ◊°◊ë◊ê, ◊ô◊©◊®◊ê◊ú\\nEnd | 32.067444, 34.7936703 | ◊ô◊í◊ê◊ú ◊ê◊ú◊ï◊ü, 6789731 ◊™◊ú÷æ◊ê◊ë◊ô◊ë‚Äì◊ô◊§◊ï, ◊ô◊©◊®◊ê◊ú\\nStop | 32.1962854, 34.8766859 | ◊®◊†◊†◊ô◊ù, ◊®◊¢◊†◊†◊î, ◊ô◊©◊®◊ê◊ú\\nStop | 32.1739447, 34.8081801 | ◊î◊®◊¶◊ú◊ô◊î ◊§◊ô◊™◊ï◊ó, ◊î◊®◊¶◊ú◊ô◊î, ◊ô◊©◊®◊ê◊ú\\nStop | 32.1879896, 34.8934844 | ◊õ◊§◊® ◊°◊ë◊ê ◊î◊ô◊®◊ï◊ß◊î, ◊õ◊§◊® ◊°◊ë◊ê, ◊ô◊©◊®◊ê◊ú\",\n      \"response_structure\": \"Start: ◊û◊ô◊õ◊ú, ◊õ◊§◊® ◊°◊ë◊ê (32.1878296, 34.9354013)\\nStop 1: ◊õ◊§◊® ◊°◊ë◊ê ◊î◊ô◊®◊ï◊ß◊î (32.1879896, 34.8934844)\\nStop 2: ◊®◊†◊†◊ô◊ù, ◊®◊¢◊†◊†◊î (32.1962854, 34.8766859)\\nStop 3: ◊î◊®◊¶◊ú◊ô◊î ◊§◊ô◊™◊ï◊ó (32.1739447, 34.8081801)\\nEnd: ◊ô◊í◊ê◊ú ◊ê◊ú◊ï◊ü, ◊™◊ú ◊ê◊ë◊ô◊ë‚Äì◊ô◊§◊ï (32.067444, 34.7936703)\"\n    }\n    ```\n\n    **Authentication Required:** Bearer token",
        "operationId": "optimize_route_with_ai_ai_route_optimize_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteOptimizeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteOptimizeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIError"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/ai/health": {
      "get": {
        "tags": [
          "ai"
        ],
        "summary": "Ai Health",
        "description": "Health check for AI endpoints",
        "operationId": "ai_health_ai_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "description": "**Login with Email and Password**\n\nAuthenticate with email address and password against the production database.\n\n**How to use:**\n1. Enter your registered email address\n2. Enter your password (if no password field, any non-empty string for existing users)\n3. Copy the `access_token` from the response\n4. Click the \"Authorize\" button in Swagger UI\n5. Enter: `Bearer <your_access_token>`\n6. Use protected endpoints with automatic authentication\n\n**Example:**\n- Email: `adar.bahar@gmail.com`\n- Password: `your_password` (or any string if password not implemented yet)\n- Response: `{\"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\", ...}`\n- Authorization: `Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...`\n\n**Note:** Only existing users in the database can login. No automatic user creation.",
        "operationId": "login_auth_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get Current User Profile",
        "description": "**Get Current User Profile**\n\nReturns the profile information for the currently authenticated user.\n\n**Requires Authentication:** You must include a valid Bearer token in the Authorization header.\n\n**How to authenticate:**\n1. First login using `/auth/login` to get your token\n2. Click the \"Authorize\" button and enter: `Bearer <your_token>`\n3. This endpoint will then return your user profile",
        "operationId": "get_current_user_profile_auth_me_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/app-login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "App Login",
        "description": "**Simple App Login**\n\nSimple authentication endpoint for apps that returns authenticated/not authenticated\nwithout token management. Validates email and password against the user database.\n\n**Features:**\n- No JWT token generation or management\n- Simple boolean response (authenticated: true/false)\n- Returns user ID on successful authentication\n- Validates against hashed passwords in database\n- Checks user account status (must be ACTIVE)\n\n**Use Cases:**\n- Mobile apps with their own session management\n- Simple authentication checks\n- Legacy systems that don't use JWT tokens\n- Quick authentication validation\n\n**Request Body:**\n```json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"user_password\"\n}\n```\n\n**Response:**\n```json\n{\n  \"authenticated\": true,\n  \"user_id\": \"01K5P68329YFSCTV777EB4GM9P\",\n  \"message\": \"Authentication successful\"\n}\n```\n\n**Error Response:**\n```json\n{\n  \"authenticated\": false,\n  \"user_id\": null,\n  \"message\": \"Invalid email or password\"\n}\n```",
        "operationId": "app_login_auth_app_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppLoginResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "description": "**Logout**\n\nLogout endpoint for completeness. Since tokens are stateless in this development system,\nthis endpoint simply returns a success message.\n\n**Note:** In a production system, this would invalidate the token server-side.\nFor this development system, simply remove the token from your client storage.",
        "operationId": "logout_auth_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/jwt/login": {
      "post": {
        "tags": [
          "jwt-auth"
        ],
        "summary": "Jwt Login",
        "description": "Authenticate user with email/password and return JWT tokens",
        "operationId": "jwt_login_auth_jwt_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/jwt/refresh": {
      "post": {
        "tags": [
          "jwt-auth"
        ],
        "summary": "Jwt Refresh Token",
        "description": "Refresh access token using refresh token",
        "operationId": "jwt_refresh_token_auth_jwt_refresh_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/jwt/logout": {
      "post": {
        "tags": [
          "jwt-auth"
        ],
        "summary": "Jwt Logout",
        "description": "Logout user (client should discard tokens)",
        "operationId": "jwt_logout_auth_jwt_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/jwt/validate": {
      "get": {
        "tags": [
          "jwt-auth"
        ],
        "summary": "Jwt Validate Token",
        "description": "Validate a JWT token and return user information",
        "operationId": "jwt_validate_token_auth_jwt_validate_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/jwt/health": {
      "get": {
        "tags": [
          "jwt-auth"
        ],
        "summary": "Jwt Health",
        "description": "Health check for JWT authentication endpoints",
        "operationId": "jwt_health_auth_jwt_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/trips/": {
      "post": {
        "tags": [
          "trips"
        ],
        "summary": "Create new trip with enhanced validation",
        "description": "**Create New Trip**\n\n    Create a new trip with comprehensive validation and intelligent guidance.\n\n    **Features:**\n    - ‚úÖ Input sanitization and validation\n    - ‚úÖ Contextual next steps for trip planning\n    - ‚úÖ Smart date validation with timezone support\n    - ‚úÖ Automatic slug generation from title\n    - ‚úÖ Duplicate title detection per user\n\n    **Business Rules:**\n    - Trip titles must be unique per user\n    - Start dates cannot be in the past (if provided)\n    - Destinations are validated for format\n    - Automatic status set to 'draft' for new trips\n\n    **Next Steps After Creation:**\n    1. üìÖ Add your first day to the itinerary\n    2. üìç Set start and end locations for routing\n    3. üë• Invite collaborators if planning together\n    4. üéØ Add stops and activities to your days\n\n    **Authentication Required:** You must be logged in to create trips.",
        "operationId": "create_trip_trips__post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Trip created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripCreateResponse"
                },
                "example": {
                  "trip": {
                    "id": "01K4AHPK4S1KVTYDB5ASTGTM8K",
                    "title": "Summer Road Trip 2024",
                    "slug": "summer-road-trip-2024",
                    "destination": "California, USA",
                    "start_date": "2024-07-15",
                    "status": "draft",
                    "is_published": false,
                    "created_at": "2024-01-15T10:30:00Z",
                    "updated_at": "2024-01-15T10:30:00Z"
                  },
                  "next_steps": [
                    "Create your first day",
                    "Add start and end locations",
                    "Invite collaborators"
                  ],
                  "suggestions": {
                    "planning_timeline": "You have plenty of time to plan your summer trip!",
                    "popular_destinations": [
                      "San Francisco",
                      "Los Angeles",
                      "San Diego"
                    ],
                    "recommended_duration": "7-10 days for a California road trip"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "VALIDATION_ERROR",
                    "message": "Request validation failed",
                    "field_errors": {
                      "title": [
                        "String should have at least 1 character"
                      ],
                      "start_date": [
                        "Date cannot be in the past"
                      ]
                    },
                    "suggestions": [
                      "Provide a descriptive trip title",
                      "Choose a future start date or leave empty"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174000"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "AUTHENTICATION_REQUIRED",
                    "message": "Authentication required",
                    "suggestions": [
                      "Include a valid Bearer token in the Authorization header",
                      "Ensure your token has not expired"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174001"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "trips"
        ],
        "summary": "List user trips with enhanced pagination",
        "description": "**List User Trips**\n\n    Retrieve a paginated list of trips with filtering and flexible response formats.\n\n    **Features:**\n    - ‚úÖ Enhanced pagination with navigation links\n    - ‚úÖ Status-based filtering (draft, active, completed, archived)\n    - ‚úÖ Owner filtering for shared trip access\n    - ‚úÖ Legacy and modern response formats\n    - ‚úÖ Comprehensive metadata and navigation\n    - ‚úÖ Performance optimized queries\n\n    **Filter Options:**\n    - **status**: Filter by trip status (draft, active, completed, archived)\n    - **owner**: Filter by owner ID (defaults to your trips)\n\n    **Response Formats:**\n    - **modern**: Enhanced format with pagination metadata and navigation links\n    - **legacy**: Simple format for backward compatibility\n\n    **Pagination Features:**\n    - Navigation links (first, last, next, prev, self)\n    - Total count and page information\n    - Configurable page size (1-100 trips per page)\n    - Efficient database queries with proper indexing\n\n    **Authentication Required:** You must be logged in to view trips.",
        "operationId": "list_trips_trips__get",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TripStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by trip status",
              "title": "Status"
            },
            "description": "Filter by trip status"
          },
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by owner ID (defaults to your trips)",
              "title": "Owner"
            },
            "description": "Filter by owner ID (defaults to your trips)"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number (starts at 1)",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number (starts at 1)"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of trips per page",
              "default": 20,
              "title": "Size"
            },
            "description": "Number of trips per page"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort by field:direction (created_at:desc, updated_at:desc, title:asc, start_date:desc)",
              "default": "created_at:desc",
              "title": "Sort By"
            },
            "description": "Sort by field:direction (created_at:desc, updated_at:desc, title:asc, start_date:desc)"
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(legacy|modern|short)$"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Response format: 'legacy', 'modern', or 'short'",
              "default": "modern",
              "title": "Format"
            },
            "description": "Response format: 'legacy', 'modern', or 'short'"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of trips with pagination metadata",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse_Trip_"
                    },
                    {
                      "$ref": "#/components/schemas/TripList"
                    },
                    {
                      "$ref": "#/components/schemas/TripShortResponse"
                    }
                  ],
                  "title": "Response List Trips Trips  Get"
                },
                "examples": {
                  "modern_format": {
                    "summary": "Modern paginated response",
                    "value": {
                      "data": [
                        {
                          "id": "01K4AHPK4S1KVTYDB5ASTGTM8K",
                          "title": "Summer Road Trip 2024",
                          "slug": "summer-road-trip-2024",
                          "destination": "California, USA",
                          "start_date": "2024-07-15",
                          "status": "draft",
                          "is_published": false,
                          "created_at": "2024-01-15T10:30:00Z",
                          "updated_at": "2024-01-15T10:30:00Z"
                        }
                      ],
                      "meta": {
                        "page": 1,
                        "size": 20,
                        "total": 25,
                        "pages": 2
                      },
                      "links": {
                        "first": "/trips?page=1&size=20",
                        "last": "/trips?page=2&size=20",
                        "next": "/trips?page=2&size=20",
                        "self": "/trips?page=1&size=20"
                      }
                    }
                  },
                  "legacy_format": {
                    "summary": "Legacy simple response",
                    "value": {
                      "trips": [
                        {
                          "id": "01K4AHPK4S1KVTYDB5ASTGTM8K",
                          "title": "Summer Road Trip 2024",
                          "destination": "California, USA",
                          "status": "draft"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "AUTHENTICATION_REQUIRED",
                    "message": "Authentication required",
                    "suggestions": [
                      "Include a valid Bearer token in the Authorization header",
                      "Ensure your token has not expired"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174002"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/trips/{trip_id}": {
      "get": {
        "tags": [
          "trips"
        ],
        "summary": "Get Trip",
        "description": "Get a specific trip",
        "operationId": "get_trip_trips__trip_id__get",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trip"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "trips"
        ],
        "summary": "Update Trip",
        "description": "**Update Trip**\n\nUpdate trip details including start date, title, destination, etc.\n\n**Authentication Required:** You must be the trip owner.\n\n**Note:** Updating the start_date will affect all day dates in the trip.",
        "operationId": "update_trip_trips__trip_id__patch",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trip"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "trips"
        ],
        "summary": "Delete Trip",
        "description": "**Delete Trip**\n\nPermanently delete a trip and all associated data.\n\n**Warning:** This action cannot be undone. All days, stops, and routes will be deleted.\n\n**Authentication Required:** You must be the trip owner.",
        "operationId": "delete_trip_trips__trip_id__delete",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/trips/{trip_id}/archive": {
      "post": {
        "tags": [
          "trips"
        ],
        "summary": "Archive Trip",
        "description": "Archive a trip",
        "operationId": "archive_trip_trips__trip_id__archive_post",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trip"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/trips/{trip_id}/publish": {
      "post": {
        "tags": [
          "trips"
        ],
        "summary": "Publish Trip",
        "description": "Publish a trip",
        "operationId": "publish_trip_trips__trip_id__publish_post",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trip"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/trips/bulk": {
      "delete": {
        "tags": [
          "trips"
        ],
        "summary": "Bulk Delete Trips",
        "description": "**Bulk Delete Trips**\n\nDelete multiple trips in a single operation for improved efficiency.\n\n**Features:**\n- Delete up to 10 trips at once\n- Automatic cleanup of associated days, stops, and routes\n- Transactional safety (all or nothing)\n- Permission validation for each trip\n- Cascade deletion of dependent resources\n\n**Request Body:**\n```json\n{\n  \"ids\": [\"trip_id_1\", \"trip_id_2\", \"trip_id_3\"],\n  \"force\": false\n}\n```\n\n**Use Cases:**\n- Clean up old/cancelled trips\n- Remove test trips\n- Bulk cleanup operations",
        "operationId": "bulk_delete_trips_trips_bulk_delete",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "trips"
        ],
        "summary": "Bulk Update Trips",
        "description": "**Bulk Update Trips**\n\nUpdate multiple trips in a single operation for improved efficiency.\n\n**Features:**\n- Update up to 10 trips at once\n- Field-level validation and filtering\n- Transactional safety\n- Permission validation for each trip\n\n**Allowed Update Fields:**\n- `title`: Trip title/name\n- `destination`: Trip destination\n- `start_date`: Trip start date (YYYY-MM-DD)\n- `status`: Trip status (draft, active, completed, archived)\n- `is_published`: Publication status\n\n**Request Body:**\n```json\n{\n  \"updates\": [\n    {\n      \"id\": \"trip_id_1\",\n      \"data\": {\n        \"title\": \"Updated Trip Title\",\n        \"status\": \"completed\"\n      }\n    },\n    {\n      \"id\": \"trip_id_2\",\n      \"data\": {\n        \"destination\": \"New Destination\",\n        \"is_published\": true\n      }\n    }\n  ]\n}\n```\n\n**Use Cases:**\n- Batch update trip statuses\n- Publish multiple trips\n- Update destinations for multiple trips\n- Mark trips as completed",
        "operationId": "bulk_update_trips_trips_bulk_patch",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/trips/{trip_id}/complete": {
      "get": {
        "tags": [
          "trips"
        ],
        "summary": "Get Trip Complete",
        "description": "**Get Complete Trip Data**\n\nGet comprehensive trip information including all days and stops in a single request.\n\n**Features:**\n- ‚úÖ **Complete trip data**: Trip details, all days, and all stops\n- ‚úÖ **Proper ordering**: Days by sequence (1, 2, 3...), stops by sequence within each day\n- ‚úÖ **Summary statistics**: Total days, stops, duration, and breakdowns\n- ‚úÖ **Optional place details**: Include place information for each stop\n- ‚úÖ **Route information**: Include route data if available\n- ‚úÖ **Filtering**: Filter days by status\n- ‚úÖ **Performance optimized**: Efficient queries with eager loading\n\n**Query Parameters:**\n- `include_place`: Include place details with stops (default: false)\n- `include_route_info`: Include route information (default: false)\n- `status`: Filter days by status (active, completed, etc.)\n- `day_limit`: Limit number of days returned (1-50)\n\n**Response Structure:**\n- Complete trip information with user details\n- Days ordered by sequence (1, 2, 3...)\n- Stops ordered by sequence within each day (START ‚Üí VIA ‚Üí END)\n- Summary statistics and breakdowns\n\n**Authentication Required:** You must be the trip owner.",
        "operationId": "get_trip_complete_trips__trip_id__complete_get",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "include_place",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include place information with stops",
              "default": false,
              "title": "Include Place"
            },
            "description": "Include place information with stops"
          },
          {
            "name": "include_route_info",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include route information",
              "default": false,
              "title": "Include Route Info"
            },
            "description": "Include route information"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter days by status",
              "title": "Status"
            },
            "description": "Filter days by status"
          },
          {
            "name": "day_limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 50,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "description": "Limit number of days returned",
              "title": "Day Limit"
            },
            "description": "Limit number of days returned"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TripCompleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/routing/optimization/best-insertion": {
      "post": {
        "tags": [
          "routing",
          "route-optimization"
        ],
        "summary": "Optimize Route With Best Insertion",
        "description": "Insert a new stop at the optimal position using best insertion algorithm.\n\nThis endpoint provides O(n) route optimization for interactive UI,\ngiving instant feedback when users add stops to existing routes.\n\nArgs:\n    request_data: Best insertion request data\n    current_user: Current authenticated user\n    \nReturns:\n    Optimized route with insertion metrics\n    \nRaises:\n    HTTPException: If optimization fails",
        "operationId": "optimize_route_with_best_insertion_routing_optimization_best_insertion_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Request Data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Optimize Route With Best Insertion Routing Optimization Best Insertion Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/routing/optimization/insertion-preview": {
      "get": {
        "tags": [
          "routing",
          "route-optimization"
        ],
        "summary": "Preview Best Insertion Positions",
        "description": "Preview insertion costs for all possible positions.\n\nThis endpoint calculates the cost of inserting a new stop at each\npossible position in the route, useful for UI visualization.\n\nArgs:\n    current_route: JSON string of current route points\n    new_stop: JSON string of new stop data\n    profile: Routing profile\n    optimize_for: \"time\" or \"distance\"\n    current_user: Current authenticated user\n    \nReturns:\n    List of insertion costs for each position",
        "operationId": "preview_best_insertion_positions_routing_optimization_insertion_preview_get",
        "parameters": [
          {
            "name": "current_route",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Current Route"
            }
          },
          {
            "name": "new_stop",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "New Stop"
            }
          },
          {
            "name": "profile",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "car",
              "title": "Profile"
            }
          },
          {
            "name": "optimize_for",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "time",
              "title": "Optimize For"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/routing/days/{day_id}/route/compute": {
      "post": {
        "tags": [
          "routing"
        ],
        "summary": "Compute Route",
        "description": "Compute a route for a day",
        "operationId": "compute_route_routing_days__day_id__route_compute_post",
        "parameters": [
          {
            "name": "day_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteComputeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutePreview"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/routing/days/{day_id}/routes": {
      "get": {
        "tags": [
          "routing"
        ],
        "summary": "List Saved Routes",
        "description": "List saved route versions for a day (active first).",
        "operationId": "list_saved_routes_routing_days__day_id__routes_get",
        "parameters": [
          {
            "name": "day_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteVersionList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/routing/days/{day_id}/routes/{route_version_id}/activate": {
      "patch": {
        "tags": [
          "routing"
        ],
        "summary": "Activate Route Version",
        "description": "Set a specific route version as the active (default) for the day.",
        "operationId": "activate_route_version_routing_days__day_id__routes__route_version_id__activate_patch",
        "parameters": [
          {
            "name": "day_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          },
          {
            "name": "route_version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Route Version Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteVersionSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/routing/days/{day_id}/routes/{route_version_id}/primary": {
      "patch": {
        "tags": [
          "routing"
        ],
        "summary": "Set Primary Route Version",
        "description": "Mark a specific route version as primary (recommended).",
        "operationId": "set_primary_route_version_routing_days__day_id__routes__route_version_id__primary_patch",
        "parameters": [
          {
            "name": "day_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          },
          {
            "name": "route_version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Route Version Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteVersionSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/routing/days/{day_id}/routes/{route_version_id}": {
      "patch": {
        "tags": [
          "routing"
        ],
        "summary": "Update Route Version",
        "description": "Update route version metadata (e.g., rename).",
        "operationId": "update_route_version_routing_days__day_id__routes__route_version_id__patch",
        "parameters": [
          {
            "name": "day_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          },
          {
            "name": "route_version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Route Version Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteVersionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteVersionSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/routing/days/{day_id}/route/commit": {
      "post": {
        "tags": [
          "routing"
        ],
        "summary": "Commit Route",
        "description": "Commit a computed route as a new version",
        "operationId": "commit_route_routing_days__day_id__route_commit_post",
        "parameters": [
          {
            "name": "day_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteCommitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteVersionSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/routing/days/{day_id}/active-summary": {
      "get": {
        "tags": [
          "routing"
        ],
        "summary": "Get Day Active Summary",
        "description": "Return lightweight active route summary for a single day.\nDoes not call external routing. Uses saved active route version if present.",
        "operationId": "get_day_active_summary_routing_days__day_id__active_summary_get",
        "parameters": [
          {
            "name": "day_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DayRouteActiveSummary"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/routing/days/bulk-active-summaries": {
      "post": {
        "tags": [
          "routing"
        ],
        "summary": "Get Bulk Active Summaries",
        "description": "Return lightweight active route summaries for multiple days.",
        "operationId": "get_bulk_active_summaries_routing_days_bulk_active_summaries_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDayRouteSummaryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkDayRouteSummaryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/routing/days/route-breakdown": {
      "post": {
        "tags": [
          "routing"
        ],
        "summary": "Compute Day Route Breakdown Endpoint",
        "description": "Compute detailed route breakdown for a complete day's journey\n\nThis endpoint provides segment-by-segment routing information:\n- Start to Stop 1\n- Stop 1 to Stop 2\n- Stop 2 to Stop 3\n- ...\n- Stop N to End\n\nEach segment includes:\n- Distance in kilometers\n- Duration in minutes\n- Turn-by-turn instructions\n- Route geometry (GeoJSON)\n\nThe response also includes total distance and duration for the entire day.",
        "operationId": "compute_day_route_breakdown_endpoint_routing_days_route_breakdown_post",
        "parameters": [
          {
            "name": "persist_route",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Persist Route"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DayRouteBreakdownRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DayRouteBreakdownResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/routing/optimize": {
      "post": {
        "tags": [
          "routing"
        ],
        "summary": "Optimize route with fixed start/end and optional fixed stops",
        "description": "**Advanced Route Optimization**\n\n    Optimize a route with fixed start/end points and optional fixed intermediate stops.\n    Uses TSP algorithms (nearest neighbor + 2-opt) for efficient route ordering.\n\n    **Features:**\n    - ‚úÖ Fixed start and end points (bookends)\n    - ‚úÖ Optional fixed intermediate stops with sequence numbers\n    - ‚úÖ Flexible stop reordering for optimization\n    - ‚úÖ Multiple optimization objectives (time/distance)\n    - ‚úÖ Vehicle profile support (car/bike/foot)\n    - ‚úÖ Avoidance options (tolls/ferries/highways)\n    - ‚úÖ Real road routing with geometry\n    - ‚úÖ Comprehensive error handling and validation\n\n    **Request Body:**\n    ```json\n    {\n      \"prompt\": \"Optional instructions for optimization\",\n      \"meta\": {\n        \"version\": \"1.0\",\n        \"objective\": \"time\",\n        \"vehicle_profile\": \"car\",\n        \"units\": \"metric\",\n        \"avoid\": [\"tolls\", \"highways\"]\n      },\n      \"data\": {\n        \"locations\": [\n          {\n            \"id\": \"start-1\",\n            \"type\": \"START\",\n            \"name\": \"Origin\",\n            \"lat\": 32.0853,\n            \"lng\": 34.7818,\n            \"fixed_seq\": true,\n            \"seq\": 1\n          },\n          {\n            \"id\": \"stop-1\",\n            \"type\": \"STOP\",\n            \"name\": \"Flexible Stop\",\n            \"lat\": 32.0944,\n            \"lng\": 34.7806,\n            \"fixed_seq\": false\n          },\n          {\n            \"id\": \"end-1\",\n            \"type\": \"END\",\n            \"name\": \"Destination\",\n            \"lat\": 32.0668,\n            \"lng\": 34.7647,\n            \"fixed_seq\": true\n          }\n        ]\n      }\n    }\n    ```\n\n    **Authentication Required:** Bearer token",
        "operationId": "optimize_route_routing_optimize_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteOptimizationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteOptimizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteOptimizationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "422": {
            "description": "Unroutable locations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteOptimizationErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteOptimizationErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/trips/{trip_id}/days": {
      "get": {
        "tags": [
          "days"
        ],
        "summary": "List Days",
        "description": "**Enhanced List Days in Trip**\n\nGet all days for a specific trip with advanced filtering and sorting capabilities.\n\n**Enhanced Features:**\n- ‚úÖ **Multi-attribute filtering**: Filter by status, date range, title, etc.\n- ‚úÖ **Flexible sorting**: Sort by date, sequence, title, status, etc.\n- ‚úÖ **Search functionality**: Search across day titles\n- ‚úÖ **Date range filters**: Filter by date range\n- ‚úÖ **String-based filters**: Advanced filter syntax\n\n**Filter Examples:**\n- `filter_string=status:eq:completed,date:gte:2024-01-01`\n- `sort_string=date:asc,title:asc`\n- `search=jerusalem` (searches day titles)\n- `date_from=2024-01-01&date_to=2024-12-31` (date range)\n\n**Supported Filter Fields:**\n- `date`, `title`, `status`, `seq`, `created_at`, `updated_at`\n\n**Supported Sort Fields:**\n- `date`, `seq`, `title`, `status`, `created_at`, `updated_at`\n\n**Authentication Required:** You must be the trip owner.",
        "operationId": "list_days_trips__trip_id__days_get",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "include_stops",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include stops count and route info",
              "default": false,
              "title": "Include Stops"
            },
            "description": "Include stops count and route info"
          },
          {
            "name": "filter_string",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Advanced filters: field:operator:value",
              "title": "Filter String"
            },
            "description": "Advanced filters: field:operator:value"
          },
          {
            "name": "sort_string",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort: field:direction,field2:direction2",
              "title": "Sort String"
            },
            "description": "Sort: field:direction,field2:direction2"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by day status",
              "title": "Status"
            },
            "description": "Filter by day status"
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter days from this date",
              "title": "Date From"
            },
            "description": "Filter days from this date"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter days until this date",
              "title": "Date To"
            },
            "description": "Filter days until this date"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search in day titles",
              "title": "Search"
            },
            "description": "Search in day titles"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DayList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "days"
        ],
        "summary": "Create Day",
        "description": "**Create New Day**\n\nAdd a new day to the trip. If sequence number is not provided,\nit will be auto-generated as the next available number.\n\n**Authentication Required:** You must be the trip owner.",
        "operationId": "create_day_trips__trip_id__days_post",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DayCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Day"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/trips/{trip_id}/days/summary": {
      "get": {
        "tags": [
          "days"
        ],
        "summary": "List Days With Locations",
        "description": "List days and include start/end places for each day in a single call.\nNote: This route must appear before the dynamic '/{day_id}' to avoid being captured by it.",
        "operationId": "list_days_with_locations_trips__trip_id__days_summary_get",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DayListSummary"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/trips/{trip_id}/days/{day_id}": {
      "get": {
        "tags": [
          "days"
        ],
        "summary": "Get Day",
        "description": "**Get Specific Day**\n\nGet details for a specific day in the trip.\n\n**Authentication Required:** You must be the trip owner.",
        "operationId": "get_day_trips__trip_id__days__day_id__get",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "day_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Day"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "days"
        ],
        "summary": "Update Day",
        "description": "**Update Day**\n\nUpdate details for a specific day in the trip.\n\n**Authentication Required:** You must be the trip owner.",
        "operationId": "update_day_trips__trip_id__days__day_id__patch",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "day_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DayUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Day"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "days"
        ],
        "summary": "Delete Day",
        "description": "**Delete Day**\n\nSoft delete a day from the trip. This will also soft delete\nall associated stops and routes.\n\n**Authentication Required:** You must be the trip owner.",
        "operationId": "delete_day_trips__trip_id__days__day_id__delete",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "day_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/trips/{trip_id}/days/bulk": {
      "delete": {
        "tags": [
          "days"
        ],
        "summary": "Bulk Delete Days",
        "description": "**Bulk Delete Days**\n\nDelete multiple days from a trip in a single operation.\n\n**Features:**\n- Delete up to 20 days at once\n- Automatic cleanup of associated stops and routes\n- Transactional safety (all or nothing)\n- Permission validation for trip ownership\n- Cascade deletion of dependent resources\n\n**Request Body:**\n```json\n{\n  \"ids\": [\"day_id_1\", \"day_id_2\", \"day_id_3\"],\n  \"force\": false\n}\n```\n\n**Use Cases:**\n- Remove multiple days from itinerary\n- Clear trip and start over\n- Remove cancelled days",
        "operationId": "bulk_delete_days_trips__trip_id__days_bulk_delete",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "days"
        ],
        "summary": "Bulk Update Days",
        "description": "**Bulk Update Days**\n\nUpdate multiple days in a trip in a single operation.\n\n**Features:**\n- Update up to 20 days at once\n- Field-level validation and filtering\n- Transactional safety\n- Permission validation for trip ownership\n\n**Allowed Update Fields:**\n- `title`: Day title/name\n- `date`: Day date (YYYY-MM-DD)\n- `status`: Day status (planned, active, completed)\n- `notes`: Day notes/description\n\n**Request Body:**\n```json\n{\n  \"updates\": [\n    {\n      \"id\": \"day_id_1\",\n      \"data\": {\n        \"title\": \"Updated Day Title\",\n        \"status\": \"completed\"\n      }\n    },\n    {\n      \"id\": \"day_id_2\",\n      \"data\": {\n        \"date\": \"2024-06-16\",\n        \"notes\": \"Updated notes\"\n      }\n    }\n  ]\n}\n```\n\n**Use Cases:**\n- Batch update day titles\n- Mark multiple days as completed\n- Update dates for multiple days\n- Add notes to multiple days",
        "operationId": "bulk_update_days_trips__trip_id__days_bulk_patch",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/trips/{trip_id}/days/complete": {
      "get": {
        "tags": [
          "days"
        ],
        "summary": "List Days Complete",
        "description": "**Get Complete Days with All Stops**\n\nGet all days for a trip with complete stops information in a single request.\n\n**Features:**\n- ‚úÖ **Complete nested structure**: All days with all their stops\n- ‚úÖ **Proper ordering**: Days by sequence (1, 2, 3...), stops by sequence within each day\n- ‚úÖ **Optional place details**: Include place information for each stop\n- ‚úÖ **Route information**: Include route data if available\n- ‚úÖ **Filtering**: Filter days by status\n- ‚úÖ **Performance optimized**: Single query with eager loading\n\n**Query Parameters:**\n- `include_place`: Include place details with stops (default: false)\n- `include_route_info`: Include route information (default: false)\n- `status`: Filter days by status (active, completed, etc.)\n- `day_limit`: Limit number of days returned (1-50)\n\n**Response Structure:**\n- Days ordered by sequence (1, 2, 3...)\n- Stops ordered by sequence within each day (START ‚Üí VIA ‚Üí END)\n- Complete stop details including place information\n- Summary statistics (total days, total stops)\n\n**Authentication Required:** You must be the trip owner.",
        "operationId": "list_days_complete_trips__trip_id__days_complete_get",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "include_place",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include place information with stops",
              "default": false,
              "title": "Include Place"
            },
            "description": "Include place information with stops"
          },
          {
            "name": "include_route_info",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include route information",
              "default": false,
              "title": "Include Route Info"
            },
            "description": "Include route information"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter days by status",
              "title": "Status"
            },
            "description": "Filter days by status"
          },
          {
            "name": "day_limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 50,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "description": "Limit number of days returned",
              "title": "Day Limit"
            },
            "description": "Limit number of days returned"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DaysCompleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/stops/types": {
      "get": {
        "tags": [
          "stops"
        ],
        "summary": "Get Stop Types",
        "description": "**Get Stop Types**\n\nGet all available stop types with their metadata for UI display.\n\n**No authentication required** - this is reference data.",
        "operationId": "get_stop_types_stops_types_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/StopTypeInfo"
                  },
                  "type": "array",
                  "title": "Response Get Stop Types Stops Types Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/stops/{trip_id}/days/{day_id}/stops": {
      "get": {
        "tags": [
          "stops"
        ],
        "summary": "List Stops",
        "description": "**Enhanced List Stops for Day**\n\nGet all stops for a specific day with advanced filtering and sorting capabilities.\n\n**Enhanced Features:**\n- ‚úÖ **Multi-attribute filtering**: Filter by type, duration, notes, etc.\n- ‚úÖ **Flexible sorting**: Sort by sequence, duration, creation date, etc.\n- ‚úÖ **Search functionality**: Search across notes and place names\n- ‚úÖ **Range filters**: Duration min/max filters\n- ‚úÖ **String-based filters**: Advanced filter syntax\n\n**Valid Stop Types (case-insensitive):**\n- `accommodation` - Hotels, hostels, vacation rentals, camping\n- `food` - Restaurants, cafes, bars, food trucks\n- `attraction` - Museums, landmarks, monuments\n- `activity` - Tours, sports, entertainment\n- `shopping` - Stores, markets, shopping centers\n- `gas` - Gas stations, EV charging stations\n- `transport` - Airports, train stations, bus stops\n- `services` - Banks, post offices, government offices\n- `nature` - Parks, beaches, hiking trails\n- `culture` - Museums, theaters, galleries\n- `nightlife` - Bars, clubs, entertainment venues\n- `other` - Miscellaneous stops\n\n**Parameter Examples:**\n- `stop_type=food` - Filter for food-related stops\n- `stop_type=ACCOMMODATION` - Filter for accommodation (case-insensitive)\n- `filter_string=stop_type:eq:food,duration_min:gte:30` - Advanced filtering\n- `sort_string=seq:asc,duration_min:desc` - Sort by sequence, then duration\n- `search=restaurant` - Search in notes and place names\n- `duration_min=30&duration_max=120` - Duration range filter\n\n**Supported Filter Fields:**\n- `stop_type`, `seq`, `duration_min`, `notes`, `created_at`, `updated_at`\n\n**Supported Sort Fields:**\n- `seq`, `stop_type`, `duration_min`, `created_at`, `updated_at`\n\n**Authentication Required:** You must be the trip owner.",
        "operationId": "list_stops_stops__trip_id__days__day_id__stops_get",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "day_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          },
          {
            "name": "include_place",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include place information",
              "default": false,
              "title": "Include Place"
            },
            "description": "Include place information"
          },
          {
            "name": "stop_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by stop type (case-insensitive). Valid values: accommodation, food, attraction, activity, shopping, gas, transport, services, nature, culture, nightlife, other",
              "examples": [
                "food",
                "accommodation",
                "attraction",
                "FOOD",
                "ACCOMMODATION"
              ],
              "title": "Stop Type"
            },
            "description": "Filter by stop type (case-insensitive). Valid values: accommodation, food, attraction, activity, shopping, gas, transport, services, nature, culture, nightlife, other"
          },
          {
            "name": "filter_string",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Advanced filters: field:operator:value,field2:op2:val2",
              "examples": [
                "stop_type:eq:food,duration_min:gte:30",
                "seq:gte:2,notes:contains:restaurant"
              ],
              "title": "Filter String"
            },
            "description": "Advanced filters: field:operator:value,field2:op2:val2"
          },
          {
            "name": "sort_string",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort: field:direction,field2:direction2",
              "examples": [
                "seq:asc,duration_min:desc",
                "created_at:desc"
              ],
              "title": "Sort String"
            },
            "description": "Sort: field:direction,field2:direction2"
          },
          {
            "name": "duration_min",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by minimum duration (in minutes)",
              "examples": [
                30,
                60,
                120
              ],
              "title": "Duration Min"
            },
            "description": "Filter by minimum duration (in minutes)"
          },
          {
            "name": "duration_max",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by maximum duration (in minutes)",
              "examples": [
                120,
                240,
                480
              ],
              "title": "Duration Max"
            },
            "description": "Filter by maximum duration (in minutes)"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search in stop notes and place names",
              "examples": [
                "restaurant",
                "museum",
                "hotel"
              ],
              "title": "Search"
            },
            "description": "Search in stop notes and place names"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StopList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "stops"
        ],
        "summary": "Create Stop",
        "description": "**Create New Stop**\n\nAdd a new stop to a specific day.\n\n**Request Body Example:**\n```json\n{\n  \"place_id\": \"01K4AHPK4S1KVTYDB5ASTGTM8K\",\n  \"seq\": 2,\n  \"kind\": \"via\",\n  \"stop_type\": \"food\",\n  \"duration_minutes\": 90,\n  \"notes\": \"Lunch at local restaurant\",\n  \"priority\": 2\n}\n```\n\n**Valid Stop Types:**\n- `accommodation`, `food`, `attraction`, `activity`, `shopping`\n- `gas`, `transport`, `services`, `nature`, `culture`, `nightlife`, `other`\n\n**Valid Stop Kinds:**\n- `start` - Starting point (sequence 1, fixed)\n- `via` - Intermediate stop (can be reordered)\n- `end` - Final destination (fixed)\n\n**Authentication Required:** You must be the trip owner.",
        "operationId": "create_stop_stops__trip_id__days__day_id__stops_post",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "day_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stop"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/stops/{trip_id}/days/{day_id}/stops/{stop_id}": {
      "get": {
        "tags": [
          "stops"
        ],
        "summary": "Get Stop",
        "description": "**Get Specific Stop**\n\nGet details for a specific stop.\n\n**Authentication Required:** You must be the trip owner.",
        "operationId": "get_stop_stops__trip_id__days__day_id__stops__stop_id__get",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "day_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          },
          {
            "name": "stop_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Stop Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stop"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "stops"
        ],
        "summary": "Update Stop",
        "description": "**Update Stop**\n\nUpdate stop details including type, timing, notes, etc.\n\n**Authentication Required:** You must be the trip owner.",
        "operationId": "update_stop_stops__trip_id__days__day_id__stops__stop_id__patch",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "day_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          },
          {
            "name": "stop_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Stop Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stop"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "stops"
        ],
        "summary": "Delete Stop",
        "description": "**Delete Stop**\n\nRemove a stop from the day.\n\n**Authentication Required:** You must be the trip owner.",
        "operationId": "delete_stop_stops__trip_id__days__day_id__stops__stop_id__delete",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "day_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          },
          {
            "name": "stop_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Stop Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/stops/{trip_id}/days/{day_id}/stops/reorder": {
      "post": {
        "tags": [
          "stops"
        ],
        "summary": "Reorder Stops",
        "description": "**Reorder Stops**\n\nBulk reorder stops within a day by updating their sequence numbers.\n\n**Authentication Required:** You must be the trip owner.",
        "operationId": "reorder_stops_stops__trip_id__days__day_id__stops_reorder_post",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "day_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopBulkReorder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/stops/{trip_id}/stops/summary": {
      "get": {
        "tags": [
          "stops"
        ],
        "summary": "Get Trip Stops Summary",
        "description": "**Get Trip Stops Summary**\n\nGet a summary of all stops across all days in the trip.\n\n**Authentication Required:** You must be the trip owner.",
        "operationId": "get_trip_stops_summary_stops__trip_id__stops_summary_get",
        "parameters": [
          {
            "name": "trip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Trip Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StopsSummary"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/stops/bulk": {
      "delete": {
        "tags": [
          "stops"
        ],
        "summary": "Bulk Delete Stops",
        "description": "**Bulk Delete Stops**\n\nDelete multiple stops in a single operation for improved efficiency.\n\n**Features:**\n- Delete up to 100 stops at once\n- Automatic route recomputation after deletion\n- Transactional safety (all or nothing)\n- Permission validation for each stop\n- Detailed results for each operation\n\n**Request Body:**\n```json\n{\n  \"ids\": [\"stop_id_1\", \"stop_id_2\", \"stop_id_3\"],\n  \"force\": false\n}\n```\n\n**Response:**\n```json\n{\n  \"total_items\": 3,\n  \"successful\": 2,\n  \"failed\": 1,\n  \"skipped\": 0,\n  \"items\": [\n    {\n      \"id\": \"stop_id_1\",\n      \"status\": \"success\",\n      \"operation\": \"delete\"\n    },\n    {\n      \"id\": \"stop_id_2\",\n      \"status\": \"failed\",\n      \"error\": \"Permission denied\",\n      \"operation\": \"delete\"\n    }\n  ]\n}\n```\n\n**Use Cases:**\n- Clear all stops from a day\n- Remove multiple unwanted stops\n- Cleanup operations",
        "operationId": "bulk_delete_stops_stops_bulk_delete",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "stops"
        ],
        "summary": "Bulk Update Stops",
        "description": "**Bulk Update Stops**\n\nUpdate multiple stops in a single operation for improved efficiency.\n\n**Features:**\n- Update up to 100 stops at once\n- Field-level validation and filtering\n- Automatic route recomputation if positions change\n- Transactional safety\n- Permission validation for each stop\n\n**Allowed Update Fields:**\n- `duration_min`: Duration at the stop\n- `notes`: Stop notes/description\n- `seq`: Sequence number (triggers route recomputation)\n- `stop_type`: Stop type (accommodation, food, etc.)\n\n**Request Body:**\n```json\n{\n  \"updates\": [\n    {\n      \"id\": \"stop_id_1\",\n      \"data\": {\n        \"duration_min\": 60,\n        \"notes\": \"Updated notes\"\n      }\n    },\n    {\n      \"id\": \"stop_id_2\",\n      \"data\": {\n        \"seq\": 3,\n        \"stop_type\": \"food\"\n      }\n    }\n  ]\n}\n```\n\n**Use Cases:**\n- Batch update stop durations\n- Change multiple stop types\n- Update notes for multiple stops\n- Reorder multiple stops",
        "operationId": "bulk_update_stops_stops_bulk_patch",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/stops/bulk/reorder": {
      "post": {
        "tags": [
          "stops"
        ],
        "summary": "Bulk Reorder Stops",
        "description": "**Bulk Reorder Stops**\n\nReorder multiple stops within a day in a single operation.\n\n**Features:**\n- Reorder up to 50 stops at once\n- Automatic route recomputation\n- Validates sequence numbers\n- Ensures no duplicate positions\n- Scoped to specific day\n\n**Request Body:**\n```json\n{\n  \"items\": [\n    {\"id\": \"stop_id_1\", \"seq\": 1},\n    {\"id\": \"stop_id_2\", \"seq\": 2},\n    {\"id\": \"stop_id_3\", \"seq\": 3}\n  ]\n}\n```\n\n**Response:**\n```json\n{\n  \"total_items\": 3,\n  \"successful\": 3,\n  \"failed\": 0,\n  \"items\": [\n    {\n      \"id\": \"stop_id_1\",\n      \"status\": \"success\",\n      \"operation\": \"reorder\",\n      \"data\": {\"new_sequence\": 1}\n    }\n  ]\n}\n```\n\n**Use Cases:**\n- Drag-and-drop reordering in UI\n- Optimize stop order\n- Reorganize itinerary",
        "operationId": "bulk_reorder_stops_stops_bulk_reorder_post",
        "parameters": [
          {
            "name": "day_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Day Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkReorderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/stops/{stop_id}/sequence": {
      "post": {
        "tags": [
          "stops"
        ],
        "summary": "Reorder Stop Sequence",
        "description": "**Smart Sequence Management for Stops**\n\nPerform intelligent sequence operations to avoid manual sequence number conflicts.\n\n**Supported Operations:**\n- `move_up`: Move stop up one position\n- `move_down`: Move stop down one position\n- `move_to_top`: Move stop to first position\n- `move_to_bottom`: Move stop to last position\n- `insert_after`: Insert stop after another stop\n- `insert_before`: Insert stop before another stop\n- `move_to_position`: Move stop to specific position\n\n**Benefits:**\n- ‚úÖ **Conflict-free**: Automatically handles sequence number conflicts\n- ‚úÖ **Collaborative-safe**: Works correctly with multiple users\n- ‚úÖ **Atomic operations**: All changes in single transaction\n- ‚úÖ **Auto-route update**: Triggers route recomputation\n\n**Examples:**\n\nMove up one position:\n```json\n{\"operation\": \"move_up\"}\n```\n\nInsert after another stop:\n```json\n{\n  \"operation\": \"insert_after\",\n  \"target_id\": \"other_stop_id\"\n}\n```\n\nMove to specific position:\n```json\n{\n  \"operation\": \"move_to_position\",\n  \"target_position\": 3\n}\n```",
        "operationId": "reorder_stop_sequence_stops__stop_id__sequence_post",
        "parameters": [
          {
            "name": "stop_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Stop Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SequenceOperationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceOperationResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/places/v1/places/suggest": {
      "get": {
        "tags": [
          "places",
          "places-typeahead",
          "places-typeahead"
        ],
        "summary": "Type-ahead Suggestions",
        "description": "Get fast, lightweight place suggestions while typing",
        "operationId": "get_suggestions_places_v1_places_suggest_get",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 256,
              "description": "Search query (minimum 1 character)",
              "title": "Q"
            },
            "description": "Search query (minimum 1 character)",
            "example": "montef"
          },
          {
            "name": "session_token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Session token for grouping requests",
              "title": "Session Token"
            },
            "description": "Session token for grouping requests",
            "example": "st_abc123"
          },
          {
            "name": "lat",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 90.0,
                  "minimum": -90.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "User latitude for proximity bias",
              "title": "Lat"
            },
            "description": "User latitude for proximity bias",
            "example": 32.07
          },
          {
            "name": "lng",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 180.0,
                  "minimum": -180.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "User longitude for proximity bias",
              "title": "Lng"
            },
            "description": "User longitude for proximity bias",
            "example": 34.78
          },
          {
            "name": "radius",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 50000,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bias radius in meters",
              "title": "Radius"
            },
            "description": "Bias radius in meters",
            "example": 5000
          },
          {
            "name": "bbox",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bounding box: minLon,minLat,maxLon,maxLat",
              "title": "Bbox"
            },
            "description": "Bounding box: minLon,minLat,maxLon,maxLat",
            "example": "34.7,32.0,34.8,32.1"
          },
          {
            "name": "countries",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Comma-separated ISO-3166-1 alpha-2 codes",
              "title": "Countries"
            },
            "description": "Comma-separated ISO-3166-1 alpha-2 codes",
            "example": "IL,US"
          },
          {
            "name": "categories",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Comma-separated category filters",
              "title": "Categories"
            },
            "description": "Comma-separated category filters",
            "example": "hotel,restaurant,museum"
          },
          {
            "name": "lang",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "BCP-47 language code",
              "default": "en",
              "title": "Lang"
            },
            "description": "BCP-47 language code",
            "example": "en"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 20,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "description": "Maximum results (1-20)",
              "default": 8,
              "title": "Limit"
            },
            "description": "Maximum results (1-20)",
            "example": 8
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of place suggestions with highlighted matching text",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/places/v1/places/search": {
      "get": {
        "tags": [
          "places",
          "places-typeahead",
          "places-typeahead"
        ],
        "summary": "Full Place Search",
        "description": "Search for places with comprehensive details and metadata",
        "operationId": "search_places_places_v1_places_search_get",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 256,
              "description": "Search query",
              "title": "Q"
            },
            "description": "Search query",
            "example": "hotel montefiore"
          },
          {
            "name": "lat",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 90.0,
                  "minimum": -90.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "User latitude for proximity bias",
              "title": "Lat"
            },
            "description": "User latitude for proximity bias",
            "example": 32.07
          },
          {
            "name": "lng",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 180.0,
                  "minimum": -180.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "User longitude for proximity bias",
              "title": "Lng"
            },
            "description": "User longitude for proximity bias",
            "example": 34.78
          },
          {
            "name": "radius",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 50000,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bias radius in meters",
              "title": "Radius"
            },
            "description": "Bias radius in meters",
            "example": 10000
          },
          {
            "name": "bbox",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bounding box: minLon,minLat,maxLon,maxLat",
              "title": "Bbox"
            },
            "description": "Bounding box: minLon,minLat,maxLon,maxLat",
            "example": "34.7,32.0,34.8,32.1"
          },
          {
            "name": "countries",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Comma-separated ISO-3166-1 alpha-2 codes",
              "title": "Countries"
            },
            "description": "Comma-separated ISO-3166-1 alpha-2 codes",
            "example": "IL,US"
          },
          {
            "name": "categories",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Comma-separated category filters",
              "title": "Categories"
            },
            "description": "Comma-separated category filters",
            "example": "hotel,restaurant"
          },
          {
            "name": "lang",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "BCP-47 language code",
              "default": "en",
              "title": "Lang"
            },
            "description": "BCP-47 language code",
            "example": "en"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 50,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "description": "Maximum results (1-50)",
              "default": 10,
              "title": "Limit"
            },
            "description": "Maximum results (1-50)",
            "example": 10
          },
          {
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Pagination token for next page",
              "title": "Page Token"
            },
            "description": "Pagination token for next page",
            "example": "page_20_1234567890"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Result offset for pagination",
              "title": "Offset"
            },
            "description": "Result offset for pagination",
            "example": 0
          },
          {
            "name": "open_now",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter for currently open POIs",
              "title": "Open Now"
            },
            "description": "Filter for currently open POIs",
            "example": true
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort order",
              "default": "relevance",
              "title": "Sort"
            },
            "description": "Sort order",
            "example": "relevance"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed search results with complete place information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/places/v1/places/{place_id}": {
      "get": {
        "tags": [
          "places",
          "places-typeahead",
          "places-typeahead"
        ],
        "summary": "Place Details",
        "description": "Get comprehensive details for a specific place",
        "operationId": "get_place_details_places_v1_places__place_id__get",
        "parameters": [
          {
            "name": "place_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique place identifier",
              "title": "Place Id"
            },
            "description": "Unique place identifier",
            "example": "poi_hotel_montefiore"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Complete place information including contact details, hours, and ratings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/places/v1/places/": {
      "get": {
        "tags": [
          "places",
          "places-typeahead",
          "places-typeahead"
        ],
        "summary": "Places API Health Check",
        "description": "Check the health and status of the Places API service",
        "operationId": "health_check_places_v1_places__get",
        "responses": {
          "200": {
            "description": "Service health status and uptime information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/places/search": {
      "get": {
        "tags": [
          "places",
          "places-typeahead"
        ],
        "summary": "Search Places",
        "description": "**Enhanced Place Search with Modern Pagination**\n\nSearch for places by name using MapTiler geocoding API with aggressive caching and modern pagination.\n\n**Features:**\n- Aggressive caching (5-minute TTL) for improved performance\n- Proximity-based search with lat/lon parameters\n- Integration with user's saved places\n- Modern pagination with navigation links\n\n**Parameters:**\n- `query`: Search term (minimum 2 characters)\n- `lat/lon`: Optional coordinates for proximity-based results\n- `radius`: Search radius in meters (default: 50km)\n- `limit`: Maximum results (1-50, default: 10)\n- `format`: Response format - 'modern' (default) or 'legacy'\n\n**Modern Response Format:**\n```json\n{\n  \"data\": [...],\n  \"meta\": {\n    \"current_page\": 1,\n    \"per_page\": 10,\n    \"total_items\": 25,\n    \"total_pages\": 3,\n    \"has_next\": true,\n    \"has_prev\": false\n  },\n  \"links\": {\n    \"self\": \"http://localhost:8000/places/search?query=jerusalem&page=1\",\n    \"first\": \"http://localhost:8000/places/search?query=jerusalem&page=1\",\n    \"next\": \"http://localhost:8000/places/search?query=jerusalem&page=2\"\n  }\n}\n```\n\n**Returns:** List of candidate places without creating database records.",
        "operationId": "search_places_places_search_get",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 2,
              "description": "Search term (minimum 2 characters)",
              "title": "Query"
            },
            "description": "Search term (minimum 2 characters)"
          },
          {
            "name": "lat",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 90.0,
                  "minimum": -90.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Latitude for proximity search",
              "title": "Lat"
            },
            "description": "Latitude for proximity search"
          },
          {
            "name": "lon",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 180.0,
                  "minimum": -180.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Longitude for proximity search",
              "title": "Lon"
            },
            "description": "Longitude for proximity search"
          },
          {
            "name": "radius",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search radius in meters",
              "default": 50000,
              "title": "Radius"
            },
            "description": "Search radius in meters"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "description": "Maximum number of results",
              "default": 10,
              "title": "Limit"
            },
            "description": "Maximum number of results"
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(legacy|modern)$"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Response format",
              "default": "modern",
              "title": "Format"
            },
            "description": "Response format"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse_PlaceSearchItem_"
                    },
                    {
                      "$ref": "#/components/schemas/app__schemas__place__PlaceSearchResult"
                    }
                  ],
                  "title": "Response Search Places Places Search Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/places/geocode": {
      "get": {
        "tags": [
          "places",
          "places-typeahead"
        ],
        "summary": "Geocode Address",
        "description": "Geocode a free-form address using MapTiler.",
        "operationId": "geocode_address_places_geocode_get",
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 2,
              "title": "Address"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeocodingResult"
                  },
                  "title": "Response Geocode Address Places Geocode Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/places/reverse-geocode": {
      "get": {
        "tags": [
          "places",
          "places-typeahead"
        ],
        "summary": "Reverse Geocode",
        "description": "Reverse geocode coordinates using MapTiler.",
        "operationId": "reverse_geocode_places_reverse_geocode_get",
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "maximum": 90.0,
              "minimum": -90.0,
              "title": "Lat"
            }
          },
          {
            "name": "lon",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "maximum": 180.0,
              "minimum": -180.0,
              "title": "Lon"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeocodingResult"
                  },
                  "title": "Response Reverse Geocode Places Reverse Geocode Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/places/": {
      "post": {
        "tags": [
          "places",
          "places-typeahead"
        ],
        "summary": "Create Place",
        "description": "Create a new place owned by the current user.",
        "operationId": "create_place_places__post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaceCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/places/{place_id}": {
      "get": {
        "tags": [
          "places",
          "places-typeahead"
        ],
        "summary": "Get Place",
        "operationId": "get_place_places__place_id__get",
        "parameters": [
          {
            "name": "place_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Place Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "places",
          "places-typeahead"
        ],
        "summary": "Update Place",
        "operationId": "update_place_places__place_id__patch",
        "parameters": [
          {
            "name": "place_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Place Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "places",
          "places-typeahead"
        ],
        "summary": "Delete Place",
        "operationId": "delete_place_places__place_id__delete",
        "parameters": [
          {
            "name": "place_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Place Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/places/bulk": {
      "get": {
        "tags": [
          "places",
          "places-typeahead"
        ],
        "summary": "Get Places Bulk",
        "description": "Batch fetch places by IDs. Use comma-separated ids param.",
        "operationId": "get_places_bulk_places_bulk_get",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Comma-separated place IDs",
              "title": "Ids"
            },
            "description": "Comma-separated place IDs"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlaceSchema"
                  },
                  "title": "Response Get Places Bulk Places Bulk Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/user/settings": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get User Settings",
        "operationId": "get_user_settings_user_settings_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "settings"
        ],
        "summary": "Update User Settings",
        "operationId": "update_user_settings_user_settings_patch",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingsUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/monitoring/errors/patterns": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Get error patterns analysis",
        "description": "**Error Pattern Analysis**\n\n    Analyze error patterns over a specified time period to identify:\n    - Most common error types\n    - Problematic endpoints\n    - Error frequency trends\n    - Common error messages\n\n    **Use Cases:**\n    - System health monitoring\n    - API reliability assessment\n    - Error reduction planning\n    - User experience optimization\n\n    **Admin Access Required:** This endpoint is restricted to administrators only.",
        "operationId": "get_error_patterns_monitoring_errors_patterns_get",
        "parameters": [
          {
            "name": "hours",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 168,
              "minimum": 1,
              "description": "Time period in hours (1-168)",
              "default": 24,
              "title": "Hours"
            },
            "description": "Time period in hours (1-168)"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Error patterns analysis",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "AUTHENTICATION_REQUIRED",
                    "message": "Authentication required",
                    "suggestions": [
                      "Include a valid Bearer token in the Authorization header",
                      "Ensure your token has not expired",
                      "Contact support if you continue to have authentication issues"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174000",
                  "path": "/api/endpoint"
                },
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Admin access required",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "PERMISSION_DENIED",
                    "message": "Admin access required",
                    "suggestions": [
                      "Contact an administrator to request admin privileges",
                      "Verify you are using the correct account",
                      "This endpoint is restricted to administrators only"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174002",
                  "path": "/api/admin-endpoint"
                },
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/monitoring/errors/trends": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Get error trends over time",
        "description": "**Error Trends Analysis**\n\n    Track error trends over time to identify:\n    - Daily error counts\n    - Error rate changes\n    - Trending error types\n    - System stability metrics\n\n    **Metrics Included:**\n    - Total errors in period\n    - Unique error codes\n    - Daily breakdown\n    - Top error codes\n    - Error rate trend (increasing/decreasing/stable)\n\n    **Admin Access Required:** This endpoint is restricted to administrators only.",
        "operationId": "get_error_trends_monitoring_errors_trends_get",
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 30,
              "minimum": 1,
              "description": "Time period in days (1-30)",
              "default": 7,
              "title": "Days"
            },
            "description": "Time period in days (1-30)"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Error trends analysis",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "AUTHENTICATION_REQUIRED",
                    "message": "Authentication required",
                    "suggestions": [
                      "Include a valid Bearer token in the Authorization header",
                      "Ensure your token has not expired",
                      "Contact support if you continue to have authentication issues"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174000",
                  "path": "/api/endpoint"
                },
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Admin access required",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "PERMISSION_DENIED",
                    "message": "Admin access required",
                    "suggestions": [
                      "Contact an administrator to request admin privileges",
                      "Verify you are using the correct account",
                      "This endpoint is restricted to administrators only"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174002",
                  "path": "/api/admin-endpoint"
                },
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/monitoring/errors/endpoints": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Get error analysis by endpoint",
        "description": "**Endpoint Error Analysis**\n    \n    Analyze errors grouped by API endpoint to identify:\n    - Endpoints with highest error rates\n    - Common error types per endpoint\n    - Recent error activity\n    - Endpoint reliability metrics\n    \n    **Use Cases:**\n    - Identify problematic endpoints\n    - Prioritize bug fixes\n    - Monitor endpoint health\n    - API quality assessment\n    \n    **Authentication Required:** Admin users only",
        "operationId": "get_endpoint_error_analysis_monitoring_errors_endpoints_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint error analysis",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "AUTHENTICATION_REQUIRED",
                    "message": "Authentication required",
                    "suggestions": [
                      "Include a valid Bearer token in the Authorization header",
                      "Ensure your token has not expired",
                      "Contact support if you continue to have authentication issues"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174000",
                  "path": "/api/endpoint"
                },
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Admin access required",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "PERMISSION_DENIED",
                    "message": "Admin access required",
                    "suggestions": [
                      "Contact an administrator to request admin privileges",
                      "Verify you are using the correct account",
                      "This endpoint is restricted to administrators only"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174002",
                  "path": "/api/admin-endpoint"
                },
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/monitoring/errors/validation": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Get validation error insights",
        "description": "**Validation Error Analysis**\n    \n    Deep dive into validation errors to identify:\n    - Most problematic form fields\n    - Endpoints with validation issues\n    - Common validation failures\n    - Improvement suggestions\n    \n    **Insights Provided:**\n    - Field-level error frequency\n    - Validation error trends\n    - Suggested improvements\n    - User experience impact\n    \n    **Authentication Required:** Admin users only",
        "operationId": "get_validation_error_insights_monitoring_errors_validation_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Validation error insights",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "AUTHENTICATION_REQUIRED",
                    "message": "Authentication required",
                    "suggestions": [
                      "Include a valid Bearer token in the Authorization header",
                      "Ensure your token has not expired",
                      "Contact support if you continue to have authentication issues"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174000",
                  "path": "/api/endpoint"
                },
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Admin access required",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "PERMISSION_DENIED",
                    "message": "Admin access required",
                    "suggestions": [
                      "Contact an administrator to request admin privileges",
                      "Verify you are using the correct account",
                      "This endpoint is restricted to administrators only"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174002",
                  "path": "/api/admin-endpoint"
                },
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/monitoring/errors/user/{user_id}": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Get error patterns for specific user",
        "description": "**User-Specific Error Analysis**\n\n    Analyze error patterns for a specific user to:\n    - Identify user-specific issues\n    - Provide targeted support\n    - Track user experience problems\n    - Monitor user behavior patterns\n\n    **Privacy Note:** Only accessible by admins or the user themselves\n\n    **Authentication Required:** Admin users or the user themselves",
        "operationId": "get_user_error_patterns_monitoring_errors_user__user_id__get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User error analysis",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "AUTHENTICATION_REQUIRED",
                    "message": "Authentication required",
                    "suggestions": [
                      "Include a valid Bearer token in the Authorization header",
                      "Ensure your token has not expired",
                      "Contact support if you continue to have authentication issues"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174000",
                  "path": "/api/endpoint"
                },
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Admin access required",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "PERMISSION_DENIED",
                    "message": "Admin access required",
                    "suggestions": [
                      "Contact an administrator to request admin privileges",
                      "Verify you are using the correct account",
                      "This endpoint is restricted to administrators only"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174002",
                  "path": "/api/admin-endpoint"
                },
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/monitoring/errors/resolution-metrics": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Get error resolution metrics",
        "description": "**Error Resolution Metrics**\n    \n    Analyze error resolution effectiveness:\n    - Suggestion coverage percentage\n    - Error type breakdown\n    - Resolution recommendations\n    - User experience metrics\n    \n    **Metrics Include:**\n    - Total errors tracked\n    - Errors with actionable suggestions\n    - Error type distribution\n    - Improvement recommendations\n    \n    **Authentication Required:** Admin users only",
        "operationId": "get_error_resolution_metrics_monitoring_errors_resolution_metrics_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Error resolution metrics",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "AUTHENTICATION_REQUIRED",
                    "message": "Authentication required",
                    "suggestions": [
                      "Include a valid Bearer token in the Authorization header",
                      "Ensure your token has not expired",
                      "Contact support if you continue to have authentication issues"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174000",
                  "path": "/api/endpoint"
                },
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Admin access required",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "PERMISSION_DENIED",
                    "message": "Admin access required",
                    "suggestions": [
                      "Contact an administrator to request admin privileges",
                      "Verify you are using the correct account",
                      "This endpoint is restricted to administrators only"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174002",
                  "path": "/api/admin-endpoint"
                },
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/monitoring/errors/report": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Generate comprehensive error report",
        "description": "**Comprehensive Error Report**\n    \n    Generate a complete error analysis report including:\n    - Error patterns and trends\n    - Endpoint analysis\n    - Validation insights\n    - Resolution metrics\n    - Actionable recommendations\n    \n    **Report Sections:**\n    - Executive summary\n    - Error patterns\n    - Trend analysis\n    - Endpoint breakdown\n    - Validation insights\n    - Resolution metrics\n    \n    **Use Cases:**\n    - Weekly/monthly reporting\n    - System health assessment\n    - Planning error reduction initiatives\n    - Stakeholder communication\n    \n    **Authentication Required:** Admin users only",
        "operationId": "generate_error_report_monitoring_errors_report_get",
        "parameters": [
          {
            "name": "hours",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 168,
              "minimum": 1,
              "description": "Time period for report in hours",
              "default": 24,
              "title": "Hours"
            },
            "description": "Time period for report in hours"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comprehensive error report",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "AUTHENTICATION_REQUIRED",
                    "message": "Authentication required",
                    "suggestions": [
                      "Include a valid Bearer token in the Authorization header",
                      "Ensure your token has not expired",
                      "Contact support if you continue to have authentication issues"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174000",
                  "path": "/api/endpoint"
                },
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Admin access required",
            "content": {
              "application/json": {
                "example": {
                  "error": {
                    "error_code": "PERMISSION_DENIED",
                    "message": "Admin access required",
                    "suggestions": [
                      "Contact an administrator to request admin privileges",
                      "Verify you are using the correct account",
                      "This endpoint is restricted to administrators only"
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "request_id": "req_123e4567-e89b-12d3-a456-426614174002",
                  "path": "/api/admin-endpoint"
                },
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/monitoring/health": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "üåê System health check",
        "description": "**System Health Check**\n\n    Quick health check for the monitoring system:\n    - Service availability\n    - Recent error activity\n    - System status\n\n    **Public Endpoint:** No authentication required.\n\n    **Security:**\n    - This endpoint is publicly accessible\n    - No Bearer token required\n    - Rate limiting may apply",
        "operationId": "health_check_monitoring_health_get",
        "responses": {
          "200": {
            "description": "System health status",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/enums/trip-status": {
      "get": {
        "tags": [
          "enums"
        ],
        "summary": "üåê Trip status enum documentation",
        "description": "**Trip Status Enum Documentation**\n    \n    Complete documentation for the TripStatus enum including descriptions,\n    usage examples, and validation rules.\n    \n    **Public Endpoint:** No authentication required.",
        "operationId": "get_trip_status_enum_enums_trip_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumDocumentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/enums/stop-types": {
      "get": {
        "tags": [
          "enums"
        ],
        "summary": "üåê Stop types enum documentation",
        "description": "**Stop Types Enum Documentation**\n    \n    Complete documentation for the StopType enum including categories,\n    descriptions, and usage examples for trip planning.\n    \n    **Public Endpoint:** No authentication required.",
        "operationId": "get_stop_types_enum_enums_stop_types_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumDocumentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/enums/error-codes": {
      "get": {
        "tags": [
          "enums"
        ],
        "summary": "üåê Error codes enum documentation",
        "description": "**Error Codes Enum Documentation**\n    \n    Complete documentation for API error codes including descriptions,\n    HTTP status mappings, and resolution guidance.\n    \n    **Public Endpoint:** No authentication required.",
        "operationId": "get_error_codes_enum_enums_error_codes_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumDocumentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/enums/datetime-standards": {
      "get": {
        "tags": [
          "enums"
        ],
        "summary": "üåê Date/DateTime standards documentation",
        "description": "**Date/DateTime Standards Documentation**\n\n    Complete documentation for ISO-8601 date/datetime handling standards\n    used throughout the API for consistent timezone-aware data management.\n\n    **Public Endpoint:** No authentication required.",
        "operationId": "get_datetime_standards_enums_datetime_standards_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Datetime Standards Enums Datetime Standards Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/enums/": {
      "get": {
        "tags": [
          "enums"
        ],
        "summary": "üåê Available enum documentation",
        "description": "**Available Enum Documentation**\n\n    List all available enum documentation endpoints with descriptions.\n\n    **Public Endpoint:** No authentication required.",
        "operationId": "list_enum_documentation_enums__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response List Enum Documentation Enums  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AIError": {
        "properties": {
          "error_code": {
            "type": "string",
            "title": "Error Code",
            "description": "Error code identifier"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Human-readable error message"
          },
          "details": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details",
            "description": "Additional error details"
          }
        },
        "type": "object",
        "required": [
          "error_code",
          "message"
        ],
        "title": "AIError",
        "description": "Error response for AI operations"
      },
      "APIError": {
        "properties": {
          "error_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorCode"
              }
            ],
            "description": "Machine-readable error code"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Human-readable error message"
          },
          "details": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details",
            "description": "Additional error context and debugging information"
          },
          "field_errors": {
            "anyOf": [
              {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Field Errors",
            "description": "Field-level validation errors"
          },
          "suggestions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Suggestions",
            "description": "Actionable suggestions to resolve the error"
          }
        },
        "type": "object",
        "required": [
          "error_code",
          "message"
        ],
        "title": "APIError",
        "description": "Standardized error information"
      },
      "APIErrorResponse": {
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/APIError"
              }
            ],
            "description": "Error information"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp",
            "description": "When the error occurred (ISO-8601: YYYY-MM-DDTHH:MM:SSZ)"
          },
          "request_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Request Id",
            "description": "Unique request identifier for tracking"
          },
          "path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Path",
            "description": "API endpoint path where error occurred"
          }
        },
        "type": "object",
        "required": [
          "error"
        ],
        "title": "APIErrorResponse",
        "description": "Complete error response wrapper"
      },
      "AppLoginRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "minLength": 1,
            "title": "Password",
            "description": "User password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "AppLoginRequest",
        "description": "Simple app login request schema"
      },
      "AppLoginResponse": {
        "properties": {
          "authenticated": {
            "type": "boolean",
            "title": "Authenticated",
            "description": "Whether authentication was successful"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "User ID if authenticated"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Authentication result message"
          }
        },
        "type": "object",
        "required": [
          "authenticated",
          "message"
        ],
        "title": "AppLoginResponse",
        "description": "Simple app login response schema"
      },
      "AvoidanceOption": {
        "type": "string",
        "enum": [
          "tolls",
          "ferries",
          "highways"
        ],
        "title": "AvoidanceOption",
        "description": "Avoidance options"
      },
      "BoundingBox": {
        "properties": {
          "minLat": {
            "type": "number",
            "maximum": 90.0,
            "minimum": -90.0,
            "title": "Minlat"
          },
          "minLng": {
            "type": "number",
            "maximum": 180.0,
            "minimum": -180.0,
            "title": "Minlng"
          },
          "maxLat": {
            "type": "number",
            "maximum": 90.0,
            "minimum": -90.0,
            "title": "Maxlat"
          },
          "maxLng": {
            "type": "number",
            "maximum": 180.0,
            "minimum": -180.0,
            "title": "Maxlng"
          }
        },
        "type": "object",
        "required": [
          "minLat",
          "minLng",
          "maxLat",
          "maxLng"
        ],
        "title": "BoundingBox",
        "description": "Geographic bounding box"
      },
      "BulkDayRouteSummaryRequest": {
        "properties": {
          "day_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Day Ids"
          }
        },
        "type": "object",
        "required": [
          "day_ids"
        ],
        "title": "BulkDayRouteSummaryRequest"
      },
      "BulkDayRouteSummaryResponse": {
        "properties": {
          "summaries": {
            "items": {
              "$ref": "#/components/schemas/DayRouteActiveSummary"
            },
            "type": "array",
            "title": "Summaries"
          }
        },
        "type": "object",
        "required": [
          "summaries"
        ],
        "title": "BulkDayRouteSummaryResponse"
      },
      "BulkDeleteRequest": {
        "properties": {
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "maxItems": 100,
            "minItems": 1,
            "title": "Ids",
            "description": "List of resource IDs to delete"
          },
          "force": {
            "type": "boolean",
            "title": "Force",
            "description": "Force deletion even if there are dependencies",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "ids"
        ],
        "title": "BulkDeleteRequest",
        "description": "Request for bulk deletion"
      },
      "BulkOperationResult": {
        "properties": {
          "total_items": {
            "type": "integer",
            "title": "Total Items",
            "description": "Total number of items processed"
          },
          "successful": {
            "type": "integer",
            "title": "Successful",
            "description": "Number of successful operations"
          },
          "failed": {
            "type": "integer",
            "title": "Failed",
            "description": "Number of failed operations"
          },
          "skipped": {
            "type": "integer",
            "title": "Skipped",
            "description": "Number of skipped operations"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/BulkOperationResultItem"
            },
            "type": "array",
            "title": "Items",
            "description": "Results for each item"
          },
          "errors": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Errors",
            "description": "General errors not tied to specific items"
          }
        },
        "type": "object",
        "required": [
          "total_items",
          "successful",
          "failed",
          "skipped",
          "items"
        ],
        "title": "BulkOperationResult",
        "description": "Result of a bulk operation"
      },
      "BulkOperationResultItem": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "Resource ID"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BulkOperationStatus"
              }
            ],
            "description": "Operation status"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message if operation failed"
          },
          "data": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data",
            "description": "Resulting resource data"
          },
          "operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BulkOperationType"
              }
            ],
            "description": "Operation that was performed"
          }
        },
        "type": "object",
        "required": [
          "status",
          "operation"
        ],
        "title": "BulkOperationResultItem",
        "description": "Result of an individual bulk operation item"
      },
      "BulkOperationStatus": {
        "type": "string",
        "enum": [
          "success",
          "failed",
          "skipped"
        ],
        "title": "BulkOperationStatus",
        "description": "Status of individual bulk operation items"
      },
      "BulkOperationType": {
        "type": "string",
        "enum": [
          "create",
          "update",
          "delete",
          "reorder"
        ],
        "title": "BulkOperationType",
        "description": "Types of bulk operations"
      },
      "BulkReorderRequest": {
        "properties": {
          "items": {
            "items": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "type": "object"
            },
            "type": "array",
            "minItems": 1,
            "title": "Items",
            "description": "List of items with new positions"
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "BulkReorderRequest",
        "description": "Request for bulk reordering"
      },
      "BulkUpdateRequest": {
        "properties": {
          "updates": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "maxItems": 100,
            "minItems": 1,
            "title": "Updates",
            "description": "List of update operations"
          }
        },
        "type": "object",
        "required": [
          "updates"
        ],
        "title": "BulkUpdateRequest",
        "description": "Request for bulk updates"
      },
      "Coordinates": {
        "properties": {
          "lat": {
            "type": "number",
            "maximum": 90.0,
            "minimum": -90.0,
            "title": "Lat",
            "description": "Latitude in WGS-84 decimal degrees"
          },
          "lng": {
            "type": "number",
            "maximum": 180.0,
            "minimum": -180.0,
            "title": "Lng",
            "description": "Longitude in WGS-84 decimal degrees"
          }
        },
        "type": "object",
        "required": [
          "lat",
          "lng"
        ],
        "title": "Coordinates",
        "description": "Geographic coordinates"
      },
      "Day": {
        "properties": {
          "deleted_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
            "format": "date-time",
            "title": "Deleted At",
            "description": "Soft delete timestamp in UTC (ISO-8601: YYYY-MM-DDTHH:MM:SSZ)",
            "examples": [
              "2024-01-15T10:30:00Z",
              null
            ]
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp in UTC (ISO-8601: YYYY-MM-DDTHH:MM:SSZ)",
            "examples": [
              "2024-01-15T10:30:00Z"
            ]
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update timestamp in UTC (ISO-8601: YYYY-MM-DDTHH:MM:SSZ)",
            "examples": [
              "2024-01-15T10:30:00Z"
            ]
          },
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "Id",
            "description": "Unique identifier (ULID format)",
            "examples": [
              "01K4AHPK4S1KVTYDB5ASTGTM8K"
            ]
          },
          "seq": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Seq",
            "description": "Day sequence number (1, 2, 3, etc.)"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DayStatus"
              }
            ],
            "description": "Day status",
            "default": "ACTIVE"
          },
          "rest_day": {
            "type": "boolean",
            "title": "Rest Day",
            "description": "Whether this is a rest day (no driving)",
            "default": false
          },
          "notes": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Additional notes and metadata"
          },
          "trip_id": {
            "type": "string",
            "title": "Trip Id",
            "description": "ID of the trip this day belongs to",
            "examples": [
              "01K367ED2RPNS2H19J8PQDNXFB"
            ]
          },
          "trip_start_date": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "format": "date",
            "title": "Trip Start Date",
            "description": "Trip start date for calculated_date computation (ISO-8601: YYYY-MM-DD)",
            "examples": [
              "2024-07-15"
            ]
          },
          "calculated_date": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Calculated Date",
            "description": "Calculate the date for this day based on trip start date and sequence\n\nReturns ISO-8601 formatted date string for consistency with API standards",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "id",
          "seq",
          "trip_id",
          "calculated_date"
        ],
        "title": "Day",
        "description": "Day schema with standardized ISO-8601 datetime fields",
        "examples": [
          {
            "calculated_date": "2024-07-15",
            "created_at": "2024-01-15T10:30:00Z",
            "id": "01K4AHPK4S1KVTYDB5ASTGTM8K",
            "notes": {
              "activities": [
                "hiking"
              ],
              "weather": "sunny"
            },
            "rest_day": false,
            "seq": 1,
            "status": "ACTIVE",
            "trip_id": "01K367ED2RPNS2H19J8PQDNXFB",
            "trip_start_date": "2024-07-15",
            "updated_at": "2024-01-15T10:30:00Z"
          }
        ],
        "timezone_info": {
          "description": "All datetime fields (created_at, updated_at, deleted_at) are in UTC timezone",
          "format": "ISO-8601 (YYYY-MM-DDTHH:MM:SSZ)",
          "timezone": "UTC"
        }
      },
      "DayCreate": {
        "properties": {
          "seq": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Seq",
            "description": "Day sequence number (auto-generated if not provided)"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DayStatus"
              }
            ],
            "description": "Day status",
            "default": "ACTIVE"
          },
          "rest_day": {
            "type": "boolean",
            "title": "Rest Day",
            "description": "Whether this is a rest day (no driving)",
            "default": false
          },
          "notes": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Additional notes and metadata"
          }
        },
        "type": "object",
        "title": "DayCreate",
        "description": "Schema for creating a day"
      },
      "DayList": {
        "properties": {
          "days": {
            "items": {
              "$ref": "#/components/schemas/Day"
            },
            "type": "array",
            "title": "Days"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "trip_id": {
            "type": "string",
            "title": "Trip Id"
          }
        },
        "type": "object",
        "required": [
          "days",
          "total",
          "trip_id"
        ],
        "title": "DayList",
        "description": "Day list response schema"
      },
      "DayListSummary": {
        "properties": {
          "days": {
            "items": {
              "$ref": "#/components/schemas/Day"
            },
            "type": "array",
            "title": "Days"
          },
          "locations": {
            "items": {
              "$ref": "#/components/schemas/DayLocations"
            },
            "type": "array",
            "title": "Locations"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "trip_id": {
            "type": "string",
            "title": "Trip Id"
          }
        },
        "type": "object",
        "required": [
          "days",
          "locations",
          "total",
          "trip_id"
        ],
        "title": "DayListSummary",
        "description": "Days list along with start/end places for each day"
      },
      "DayLocations": {
        "properties": {
          "day_id": {
            "type": "string",
            "title": "Day Id"
          },
          "start": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PlaceSchema"
              },
              {
                "type": "null"
              }
            ]
          },
          "end": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PlaceSchema"
              },
              {
                "type": "null"
              }
            ]
          },
          "route_total_km": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Route Total Km"
          },
          "route_total_min": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Route Total Min"
          },
          "route_coordinates": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Route Coordinates"
          }
        },
        "type": "object",
        "required": [
          "day_id"
        ],
        "title": "DayLocations"
      },
      "DayRouteActiveSummary": {
        "properties": {
          "day_id": {
            "type": "string",
            "title": "Day Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "start": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start"
          },
          "end": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "End"
          },
          "route_total_km": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Route Total Km"
          },
          "route_total_min": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Route Total Min"
          },
          "route_coordinates": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Route Coordinates"
          },
          "route_version_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Route Version Id"
          }
        },
        "type": "object",
        "required": [
          "day_id",
          "status"
        ],
        "title": "DayRouteActiveSummary"
      },
      "DayRouteBreakdownRequest": {
        "properties": {
          "trip_id": {
            "type": "string",
            "title": "Trip Id"
          },
          "day_id": {
            "type": "string",
            "title": "Day Id"
          },
          "start": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutePoint"
              }
            ],
            "description": "Starting point of the day"
          },
          "stops": {
            "items": {
              "$ref": "#/components/schemas/RoutePoint"
            },
            "type": "array",
            "title": "Stops",
            "description": "Ordered list of stops to visit"
          },
          "end": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutePoint"
              }
            ],
            "description": "Ending point of the day"
          },
          "profile": {
            "type": "string",
            "pattern": "^(car|motorcycle|bike)$",
            "title": "Profile",
            "default": "car"
          },
          "optimize": {
            "type": "boolean",
            "title": "Optimize",
            "description": "Optimize stop order between start and end points",
            "default": false
          },
          "fixed_stop_indices": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fixed Stop Indices",
            "description": "Indices of stops that cannot be reordered (0-based)"
          },
          "options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RouteOptions"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "trip_id",
          "day_id",
          "start",
          "stops",
          "end"
        ],
        "title": "DayRouteBreakdownRequest",
        "description": "Request for detailed day route breakdown with optimization support"
      },
      "DayRouteBreakdownResponse": {
        "properties": {
          "trip_id": {
            "type": "string",
            "title": "Trip Id"
          },
          "day_id": {
            "type": "string",
            "title": "Day Id"
          },
          "total_distance_km": {
            "type": "number",
            "title": "Total Distance Km",
            "description": "Total distance for the entire day"
          },
          "total_duration_min": {
            "type": "number",
            "title": "Total Duration Min",
            "description": "Total duration for the entire day"
          },
          "segments": {
            "items": {
              "$ref": "#/components/schemas/RouteSegment"
            },
            "type": "array",
            "title": "Segments",
            "description": "Individual route segments"
          },
          "optimized_order": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/RoutePoint"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Optimized Order",
            "description": "Optimized order of all points (start + stops + end) if optimization was requested"
          },
          "optimization_savings": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "number"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Optimization Savings",
            "description": "Savings from optimization: distance_km_saved, duration_min_saved"
          },
          "summary": {
            "type": "object",
            "title": "Summary",
            "description": "Additional summary information"
          },
          "computed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Computed At",
            "description": "When this breakdown was computed"
          },
          "route_version_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Route Version Id",
            "description": "ID of the route version if route was persisted to database"
          },
          "route_persisted": {
            "type": "boolean",
            "title": "Route Persisted",
            "description": "Whether this route was saved to the database",
            "default": false
          },
          "persistence_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Persistence Reason",
            "description": "Reason why route was or wasn't persisted"
          }
        },
        "type": "object",
        "required": [
          "trip_id",
          "day_id",
          "total_distance_km",
          "total_duration_min",
          "segments",
          "summary",
          "computed_at"
        ],
        "title": "DayRouteBreakdownResponse",
        "description": "Detailed breakdown of a day's route with optimization results"
      },
      "DayStatus": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "INACTIVE",
          "DELETED"
        ],
        "title": "DayStatus"
      },
      "DaySummary": {
        "properties": {
          "day": {
            "type": "integer",
            "title": "Day",
            "description": "Day sequence number"
          },
          "start": {
            "type": "boolean",
            "title": "Start",
            "description": "Whether day has a start stop"
          },
          "stops": {
            "type": "integer",
            "title": "Stops",
            "description": "Total number of stops in this day"
          },
          "end": {
            "type": "boolean",
            "title": "End",
            "description": "Whether day has an end stop"
          }
        },
        "type": "object",
        "required": [
          "day",
          "start",
          "stops",
          "end"
        ],
        "title": "DaySummary",
        "description": "Summary of a single day with start/end status and stop count"
      },
      "DayUpdate": {
        "properties": {
          "seq": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Seq",
            "description": "Day sequence number"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DayStatus"
              },
              {
                "type": "null"
              }
            ],
            "description": "Day status"
          },
          "rest_day": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rest Day",
            "description": "Whether this is a rest day"
          },
          "notes": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Additional notes and metadata"
          }
        },
        "type": "object",
        "title": "DayUpdate",
        "description": "Schema for updating a day"
      },
      "DayWithAllStops": {
        "properties": {
          "deleted_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
            "format": "date-time",
            "title": "Deleted At",
            "description": "Soft delete timestamp in UTC (ISO-8601: YYYY-MM-DDTHH:MM:SSZ)",
            "examples": [
              "2024-01-15T10:30:00Z",
              null
            ]
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp in UTC (ISO-8601: YYYY-MM-DDTHH:MM:SSZ)",
            "examples": [
              "2024-01-15T10:30:00Z"
            ]
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update timestamp in UTC (ISO-8601: YYYY-MM-DDTHH:MM:SSZ)",
            "examples": [
              "2024-01-15T10:30:00Z"
            ]
          },
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "Id",
            "description": "Unique identifier (ULID format)",
            "examples": [
              "01K4AHPK4S1KVTYDB5ASTGTM8K"
            ]
          },
          "seq": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Seq",
            "description": "Day sequence number (1, 2, 3, etc.)"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DayStatus"
              }
            ],
            "description": "Day status",
            "default": "ACTIVE"
          },
          "rest_day": {
            "type": "boolean",
            "title": "Rest Day",
            "description": "Whether this is a rest day (no driving)",
            "default": false
          },
          "notes": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Additional notes and metadata"
          },
          "trip_id": {
            "type": "string",
            "title": "Trip Id",
            "description": "ID of the trip this day belongs to",
            "examples": [
              "01K367ED2RPNS2H19J8PQDNXFB"
            ]
          },
          "trip_start_date": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "format": "date",
            "title": "Trip Start Date",
            "description": "Trip start date for calculated_date computation (ISO-8601: YYYY-MM-DD)",
            "examples": [
              "2024-07-15"
            ]
          },
          "stops": {
            "items": {},
            "type": "array",
            "title": "Stops",
            "description": "All stops for this day ordered by sequence"
          },
          "stops_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stops Count",
            "description": "Number of stops in this day"
          },
          "has_route": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Has Route",
            "description": "Whether this day has a computed route"
          },
          "calculated_date": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Calculated Date",
            "description": "Calculate the date for this day based on trip start date and sequence\n\nReturns ISO-8601 formatted date string for consistency with API standards",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "id",
          "seq",
          "trip_id",
          "calculated_date"
        ],
        "title": "DayWithAllStops",
        "description": "Day schema with complete stops array included",
        "examples": [
          {
            "calculated_date": "2024-07-15",
            "created_at": "2024-01-15T10:30:00Z",
            "id": "01K4AHPK4S1KVTYDB5ASTGTM8K",
            "notes": {
              "activities": [
                "hiking"
              ],
              "weather": "sunny"
            },
            "rest_day": false,
            "seq": 1,
            "status": "ACTIVE",
            "trip_id": "01K367ED2RPNS2H19J8PQDNXFB",
            "trip_start_date": "2024-07-15",
            "updated_at": "2024-01-15T10:30:00Z"
          }
        ],
        "timezone_info": {
          "description": "All datetime fields (created_at, updated_at, deleted_at) are in UTC timezone",
          "format": "ISO-8601 (YYYY-MM-DDTHH:MM:SSZ)",
          "timezone": "UTC"
        }
      },
      "DaysCompleteResponse": {
        "properties": {
          "trip_id": {
            "type": "string",
            "title": "Trip Id"
          },
          "days": {
            "items": {
              "$ref": "#/components/schemas/DayWithAllStops"
            },
            "type": "array",
            "title": "Days",
            "description": "All days ordered by sequence with their stops"
          },
          "total_days": {
            "type": "integer",
            "title": "Total Days"
          },
          "total_stops": {
            "type": "integer",
            "title": "Total Stops"
          }
        },
        "type": "object",
        "required": [
          "trip_id",
          "days",
          "total_days",
          "total_stops"
        ],
        "title": "DaysCompleteResponse",
        "description": "Complete days response with all stops included",
        "examples": [
          {
            "days": [
              {
                "calculated_date": "2024-07-15",
                "has_route": true,
                "id": "01K4J0CYB3YSGWDZB9N92V3ZQ5",
                "rest_day": false,
                "seq": 1,
                "status": "active",
                "stops": [
                  {
                    "id": "01K4J0CYB3YSGWDZB9N92V3ZQ6",
                    "kind": "start",
                    "place": {
                      "address": "123 Main St, Tel Aviv",
                      "name": "Grand Hotel"
                    },
                    "seq": 1,
                    "stop_type": "ACCOMMODATION"
                  }
                ],
                "stops_count": 3,
                "trip_id": "01K4J0CYB3YSGWDZB9N92V3ZQ4"
              }
            ],
            "total_days": 2,
            "total_stops": 4,
            "trip_id": "01K4J0CYB3YSGWDZB9N92V3ZQ4"
          }
        ]
      },
      "EnumDocumentation": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/EnumValue"
            },
            "type": "array",
            "title": "Values"
          },
          "usage_examples": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Usage Examples"
          },
          "validation_rules": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Validation Rules"
          },
          "related_endpoints": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Related Endpoints"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "values",
          "usage_examples",
          "validation_rules",
          "related_endpoints"
        ],
        "title": "EnumDocumentation",
        "description": "Complete enum documentation"
      },
      "EnumValue": {
        "properties": {
          "value": {
            "type": "string",
            "title": "Value"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "icon": {
            "type": "string",
            "title": "Icon"
          },
          "usage_notes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Usage Notes"
          },
          "examples": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Examples"
          }
        },
        "type": "object",
        "required": [
          "value",
          "label",
          "description",
          "icon",
          "usage_notes",
          "examples"
        ],
        "title": "EnumValue",
        "description": "Enhanced enum value with documentation"
      },
      "ErrorCode": {
        "type": "string",
        "enum": [
          "VALIDATION_ERROR",
          "INVALID_INPUT",
          "MISSING_FIELD",
          "INVALID_FORMAT",
          "AUTHENTICATION_REQUIRED",
          "INVALID_TOKEN",
          "TOKEN_EXPIRED",
          "PERMISSION_DENIED",
          "RESOURCE_NOT_FOUND",
          "RESOURCE_CONFLICT",
          "DUPLICATE_RESOURCE",
          "BUSINESS_RULE_VIOLATION",
          "INVALID_OPERATION",
          "SEQUENCE_CONFLICT",
          "RATE_LIMIT_EXCEEDED",
          "QUOTA_EXCEEDED",
          "INTERNAL_ERROR",
          "SERVICE_UNAVAILABLE",
          "EXTERNAL_SERVICE_ERROR",
          "DATABASE_ERROR",
          "ROUTING_ERROR",
          "COORDINATES_OUT_OF_BOUNDS",
          "ROUTING_SERVICE_UNAVAILABLE"
        ],
        "title": "ErrorCode",
        "description": "Standardized error codes for comprehensive API error handling\n\nProvides consistent, machine-readable error codes that enable\nclients to handle specific error conditions programmatically."
      },
      "GeocodingResult": {
        "properties": {
          "address": {
            "type": "string",
            "title": "Address"
          },
          "lat": {
            "type": "number",
            "title": "Lat"
          },
          "lon": {
            "type": "number",
            "title": "Lon"
          },
          "formatted_address": {
            "type": "string",
            "title": "Formatted Address"
          },
          "place_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Place Id"
          },
          "types": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Types"
          }
        },
        "type": "object",
        "required": [
          "address",
          "lat",
          "lon",
          "formatted_address"
        ],
        "title": "GeocodingResult"
      },
      "GeometryBounds": {
        "properties": {
          "min_lat": {
            "type": "number",
            "title": "Min Lat",
            "description": "Minimum latitude"
          },
          "min_lng": {
            "type": "number",
            "title": "Min Lng",
            "description": "Minimum longitude"
          },
          "max_lat": {
            "type": "number",
            "title": "Max Lat",
            "description": "Maximum latitude"
          },
          "max_lng": {
            "type": "number",
            "title": "Max Lng",
            "description": "Maximum longitude"
          }
        },
        "type": "object",
        "required": [
          "min_lat",
          "min_lng",
          "max_lat",
          "max_lng"
        ],
        "title": "GeometryBounds",
        "description": "Geometry bounding box"
      },
      "GeometryType": {
        "type": "string",
        "enum": [
          "rooftop",
          "route",
          "centroid",
          "interpolated"
        ],
        "title": "GeometryType",
        "description": "Precision level of coordinates"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Service status"
          },
          "uptime_s": {
            "type": "integer",
            "title": "Uptime S",
            "description": "Uptime in seconds"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version",
            "description": "Service version"
          }
        },
        "type": "object",
        "required": [
          "status",
          "uptime_s"
        ],
        "title": "HealthResponse",
        "description": "Health check response"
      },
      "LocationRequest": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique location identifier"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LocationType"
              }
            ],
            "description": "Location type"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Location name"
          },
          "lat": {
            "type": "number",
            "maximum": 90.0,
            "minimum": -90.0,
            "title": "Lat",
            "description": "Latitude"
          },
          "lng": {
            "type": "number",
            "maximum": 180.0,
            "minimum": -180.0,
            "title": "Lng",
            "description": "Longitude"
          },
          "fixed_seq": {
            "type": "boolean",
            "title": "Fixed Seq",
            "description": "Whether sequence is fixed"
          },
          "seq": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seq",
            "description": "Sequence number (required if fixed_seq=true for STOP)"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "name",
          "lat",
          "lng",
          "fixed_seq"
        ],
        "title": "LocationRequest",
        "description": "Location in optimization request"
      },
      "LocationResponse": {
        "properties": {
          "seq": {
            "type": "integer",
            "title": "Seq",
            "description": "Sequence number"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Location identifier"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LocationType"
              }
            ],
            "description": "Location type"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Location name"
          },
          "lat": {
            "type": "number",
            "title": "Lat",
            "description": "Latitude"
          },
          "lng": {
            "type": "number",
            "title": "Lng",
            "description": "Longitude"
          },
          "fixed_seq": {
            "type": "boolean",
            "title": "Fixed Seq",
            "description": "Whether sequence was fixed"
          },
          "eta_min": {
            "type": "number",
            "title": "Eta Min",
            "description": "ETA from START in minutes"
          },
          "leg_distance_km": {
            "type": "number",
            "title": "Leg Distance Km",
            "description": "Distance from previous location in km"
          },
          "leg_duration_min": {
            "type": "number",
            "title": "Leg Duration Min",
            "description": "Duration from previous location in minutes"
          }
        },
        "type": "object",
        "required": [
          "seq",
          "id",
          "type",
          "name",
          "lat",
          "lng",
          "fixed_seq",
          "eta_min",
          "leg_distance_km",
          "leg_duration_min"
        ],
        "title": "LocationResponse",
        "description": "Location in optimization response"
      },
      "LocationType": {
        "type": "string",
        "enum": [
          "START",
          "STOP",
          "END"
        ],
        "title": "LocationType",
        "description": "Location type enumeration"
      },
      "LoginRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "minLength": 1,
            "title": "Password",
            "description": "User password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "LoginRequest",
        "description": "Login request schema"
      },
      "LoginResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "refresh_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refresh Token",
            "description": "JWT refresh token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          },
          "expires_in": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires In",
            "description": "Token expiry time in seconds"
          },
          "user": {
            "$ref": "#/components/schemas/UserProfile"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "user"
        ],
        "title": "LoginResponse",
        "description": "Login response schema"
      },
      "LogoutResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Logout success message",
            "default": "Successfully logged out"
          }
        },
        "type": "object",
        "title": "LogoutResponse",
        "description": "Logout response schema"
      },
      "Objective": {
        "type": "string",
        "enum": [
          "time",
          "distance"
        ],
        "title": "Objective",
        "description": "Optimization objective"
      },
      "OptimizationData": {
        "properties": {
          "locations": {
            "items": {
              "$ref": "#/components/schemas/LocationRequest"
            },
            "type": "array",
            "title": "Locations",
            "description": "List of locations to optimize"
          }
        },
        "type": "object",
        "required": [
          "locations"
        ],
        "title": "OptimizationData",
        "description": "Optimization data container"
      },
      "OptimizationDiagnostics": {
        "properties": {
          "warnings": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Warnings",
            "description": "Warning messages"
          },
          "assumptions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Assumptions",
            "description": "Assumptions made"
          },
          "computation_notes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Computation Notes",
            "description": "Computation notes"
          }
        },
        "type": "object",
        "title": "OptimizationDiagnostics",
        "description": "Optimization diagnostics"
      },
      "OptimizationError": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Error message"
          }
        },
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "title": "OptimizationError",
        "description": "Optimization error"
      },
      "OptimizationGeometry": {
        "properties": {
          "format": {
            "type": "string",
            "title": "Format",
            "description": "Geometry format",
            "default": "geojson"
          },
          "route": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RouteGeometry"
              }
            ],
            "description": "Route geometry"
          },
          "bounds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GeometryBounds"
              }
            ],
            "description": "Geometry bounds"
          }
        },
        "type": "object",
        "required": [
          "route",
          "bounds"
        ],
        "title": "OptimizationGeometry",
        "description": "Optimization geometry container"
      },
      "OptimizationMeta": {
        "properties": {
          "version": {
            "type": "string",
            "title": "Version",
            "description": "API version",
            "default": "1.0"
          },
          "objective": {
            "$ref": "#/components/schemas/Objective"
          },
          "vehicle_profile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VehicleProfile"
              }
            ],
            "description": "Vehicle profile"
          },
          "units": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Units"
              }
            ],
            "description": "Units system",
            "default": "metric"
          },
          "avoid": {
            "items": {
              "$ref": "#/components/schemas/AvoidanceOption"
            },
            "type": "array",
            "title": "Avoid",
            "description": "Avoidance options"
          }
        },
        "type": "object",
        "required": [
          "objective",
          "vehicle_profile"
        ],
        "title": "OptimizationMeta",
        "description": "Optimization metadata"
      },
      "OptimizationSummary": {
        "properties": {
          "stop_count": {
            "type": "integer",
            "title": "Stop Count",
            "description": "Number of STOP locations"
          },
          "total_distance_km": {
            "type": "number",
            "title": "Total Distance Km",
            "description": "Total route distance in km"
          },
          "total_duration_min": {
            "type": "number",
            "title": "Total Duration Min",
            "description": "Total route duration in minutes"
          }
        },
        "type": "object",
        "required": [
          "stop_count",
          "total_distance_km",
          "total_duration_min"
        ],
        "title": "OptimizationSummary",
        "description": "Optimization summary statistics"
      },
      "PaginatedResponse_PlaceSearchItem_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/PlaceSearchItem"
            },
            "type": "array",
            "title": "Data",
            "description": "List of items for current page"
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationLinks"
              }
            ],
            "description": "Navigation links"
          }
        },
        "type": "object",
        "required": [
          "data",
          "meta",
          "links"
        ],
        "title": "PaginatedResponse[PlaceSearchItem]"
      },
      "PaginatedResponse_Trip_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Trip"
            },
            "type": "array",
            "title": "Data",
            "description": "List of items for current page"
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationLinks"
              }
            ],
            "description": "Navigation links"
          }
        },
        "type": "object",
        "required": [
          "data",
          "meta",
          "links"
        ],
        "title": "PaginatedResponse[Trip]"
      },
      "PaginationLinks": {
        "properties": {
          "self": {
            "type": "string",
            "title": "Self",
            "description": "Current page URL"
          },
          "first": {
            "type": "string",
            "title": "First",
            "description": "First page URL"
          },
          "last": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last",
            "description": "Last page URL"
          },
          "next": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next",
            "description": "Next page URL"
          },
          "prev": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prev",
            "description": "Previous page URL"
          }
        },
        "type": "object",
        "required": [
          "self",
          "first"
        ],
        "title": "PaginationLinks",
        "description": "Navigation links for pagination"
      },
      "PaginationMeta": {
        "properties": {
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "Current page number (1-based)"
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page",
            "description": "Items per page"
          },
          "total_items": {
            "type": "integer",
            "title": "Total Items",
            "description": "Total number of items"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages",
            "description": "Total number of pages"
          },
          "has_next": {
            "type": "boolean",
            "title": "Has Next",
            "description": "Whether there is a next page"
          },
          "has_prev": {
            "type": "boolean",
            "title": "Has Prev",
            "description": "Whether there is a previous page"
          },
          "from_item": {
            "type": "integer",
            "title": "From Item",
            "description": "First item number on current page",
            "readOnly": true
          },
          "to_item": {
            "type": "integer",
            "title": "To Item",
            "description": "Last item number on current page",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "current_page",
          "per_page",
          "total_items",
          "total_pages",
          "has_next",
          "has_prev",
          "from_item",
          "to_item"
        ],
        "title": "PaginationMeta",
        "description": "Pagination metadata"
      },
      "PlaceCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name"
          },
          "address": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Address"
          },
          "lat": {
            "type": "number",
            "maximum": 90.0,
            "minimum": -90.0,
            "title": "Lat"
          },
          "lon": {
            "type": "number",
            "maximum": 180.0,
            "minimum": -180.0,
            "title": "Lon"
          },
          "meta": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta"
          }
        },
        "type": "object",
        "required": [
          "name",
          "lat",
          "lon"
        ],
        "title": "PlaceCreate",
        "description": "Schema for creating a place"
      },
      "PlaceDetails": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique place identifier"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Place name"
          },
          "formatted_address": {
            "type": "string",
            "title": "Formatted Address",
            "description": "Human-readable address"
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/PlaceType"
            },
            "type": "array",
            "title": "Types",
            "description": "Place type categories"
          },
          "center": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Coordinates"
              }
            ],
            "description": "Geographic center point"
          },
          "bbox": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BoundingBox"
              },
              {
                "type": "null"
              }
            ],
            "description": "Bounding box if available"
          },
          "categories": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Categories",
            "description": "Detailed categories"
          },
          "score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Score",
            "description": "Relevance score 0-1"
          },
          "timezone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timezone",
            "description": "IANA timezone identifier"
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PlaceMetadata"
              },
              {
                "type": "null"
              }
            ],
            "description": "Additional metadata"
          },
          "geometry_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GeometryType"
              },
              {
                "type": "null"
              }
            ],
            "description": "Coordinate precision"
          },
          "phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone",
            "description": "Phone number"
          },
          "website": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Website",
            "description": "Website URL"
          },
          "hours": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hours",
            "description": "Operating hours"
          },
          "rating": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 5.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Rating",
            "description": "Average rating 0-5"
          },
          "popularity": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Popularity",
            "description": "Popularity score 0-1"
          },
          "aliases": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Aliases",
            "description": "Alternative names"
          },
          "source_refs": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Source Refs",
            "description": "External source references"
          },
          "name_local": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name Local",
            "description": "Name in local language"
          },
          "name_ascii": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name Ascii",
            "description": "ASCII-only name"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "formatted_address",
          "center",
          "score"
        ],
        "title": "PlaceDetails",
        "description": "Detailed place information"
      },
      "PlaceMetadata": {
        "properties": {
          "country": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Country",
            "description": "ISO-3166-1 alpha-2 country code"
          },
          "postcode": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Postcode"
          },
          "region": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Region"
          },
          "locality": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Locality"
          },
          "street_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Street Number"
          },
          "route": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Route"
          }
        },
        "type": "object",
        "title": "PlaceMetadata",
        "description": "Additional place metadata"
      },
      "PlaceSchema": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address"
          },
          "lat": {
            "type": "number",
            "title": "Lat"
          },
          "lon": {
            "type": "number",
            "title": "Lon"
          },
          "meta": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "lat",
          "lon",
          "created_at",
          "updated_at"
        ],
        "title": "PlaceSchema",
        "description": "Place response schema"
      },
      "PlaceSearchItem": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address"
          },
          "lat": {
            "type": "number",
            "title": "Lat"
          },
          "lon": {
            "type": "number",
            "title": "Lon"
          },
          "meta": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta"
          },
          "is_saved": {
            "type": "boolean",
            "title": "Is Saved",
            "default": false
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "lat",
          "lon"
        ],
        "title": "PlaceSearchItem",
        "description": "Lightweight place item for search results (not persisted)"
      },
      "PlaceSuggestion": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique place identifier"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Place name"
          },
          "highlighted": {
            "type": "string",
            "title": "Highlighted",
            "description": "Name with highlighted matching text"
          },
          "formatted_address": {
            "type": "string",
            "title": "Formatted Address",
            "description": "Human-readable address"
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/PlaceType"
            },
            "type": "array",
            "title": "Types",
            "description": "Place type categories"
          },
          "center": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Coordinates"
              }
            ],
            "description": "Geographic center point"
          },
          "distance_m": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Distance M",
            "description": "Distance from query point in meters"
          },
          "confidence": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Confidence",
            "description": "Confidence score 0-1"
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Data source identifier",
            "default": "internal"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "highlighted",
          "formatted_address",
          "center",
          "confidence"
        ],
        "title": "PlaceSuggestion",
        "description": "Type-ahead suggestion result"
      },
      "PlaceType": {
        "type": "string",
        "enum": [
          "address",
          "poi",
          "lodging",
          "restaurant",
          "museum",
          "attraction",
          "business"
        ],
        "title": "PlaceType",
        "description": "Place type categories"
      },
      "PlaceUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "address": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Address"
          },
          "lat": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 90.0,
                "minimum": -90.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Lat"
          },
          "lon": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 180.0,
                "minimum": -180.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Lon"
          },
          "meta": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta"
          }
        },
        "type": "object",
        "title": "PlaceUpdate",
        "description": "Schema for updating a place"
      },
      "RefreshRequest": {
        "properties": {
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token",
            "description": "JWT refresh token"
          }
        },
        "type": "object",
        "required": [
          "refresh_token"
        ],
        "title": "RefreshRequest",
        "description": "Token refresh request schema"
      },
      "RefreshResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token",
            "description": "New JWT access token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "description": "Token type",
            "default": "bearer"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In",
            "description": "Token expiry time in seconds"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "expires_in"
        ],
        "title": "RefreshResponse",
        "description": "Token refresh response schema"
      },
      "RouteCommitRequest": {
        "properties": {
          "preview_token": {
            "type": "string",
            "title": "Preview Token"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "preview_token"
        ],
        "title": "RouteCommitRequest",
        "description": "Route commit request"
      },
      "RouteComputeRequest": {
        "properties": {
          "profile": {
            "type": "string",
            "pattern": "^(car|motorcycle|bike)$",
            "title": "Profile"
          },
          "optimize": {
            "type": "boolean",
            "title": "Optimize",
            "description": "Optimize VIA stop order (respects fixed stops)",
            "default": false
          },
          "fixed_stop_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fixed Stop Ids",
            "description": "Explicit list of fixed stop IDs (optional; otherwise use DB flags)"
          },
          "options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RouteOptions"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "profile"
        ],
        "title": "RouteComputeRequest",
        "description": "Route computation request"
      },
      "RouteGeometry": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "description": "GeoJSON type",
            "default": "LineString"
          },
          "coordinates": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Coordinates",
            "description": "GeoJSON coordinates [lng, lat]"
          }
        },
        "type": "object",
        "required": [
          "coordinates"
        ],
        "title": "RouteGeometry",
        "description": "Route geometry data"
      },
      "RouteLegSchema": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "route_version_id": {
            "type": "string",
            "title": "Route Version Id"
          },
          "seq": {
            "type": "integer",
            "title": "Seq"
          },
          "distance_km": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Distance Km"
          },
          "duration_min": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Min"
          },
          "geojson": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Geojson"
          },
          "meta": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "route_version_id",
          "seq",
          "distance_km",
          "duration_min",
          "geojson",
          "meta",
          "created_at",
          "updated_at"
        ],
        "title": "RouteLegSchema",
        "description": "Route leg schema"
      },
      "RouteOptimizationErrorResponse": {
        "properties": {
          "version": {
            "type": "string",
            "title": "Version",
            "description": "API version",
            "default": "1.0"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/OptimizationError"
            },
            "type": "array",
            "title": "Errors",
            "description": "List of errors"
          }
        },
        "type": "object",
        "required": [
          "errors"
        ],
        "title": "RouteOptimizationErrorResponse",
        "description": "Route optimization error response"
      },
      "RouteOptimizationRequest": {
        "properties": {
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt",
            "description": "Free-form optimization instructions"
          },
          "meta": {
            "$ref": "#/components/schemas/OptimizationMeta"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OptimizationData"
              }
            ],
            "description": "Location data"
          }
        },
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "title": "RouteOptimizationRequest",
        "description": "Route optimization request schema"
      },
      "RouteOptimizationResponse": {
        "properties": {
          "version": {
            "type": "string",
            "title": "Version",
            "description": "API version",
            "default": "1.0"
          },
          "objective": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Objective"
              }
            ],
            "description": "Optimization objective used"
          },
          "units": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Units"
              }
            ],
            "description": "Units used"
          },
          "ordered": {
            "items": {
              "$ref": "#/components/schemas/LocationResponse"
            },
            "type": "array",
            "title": "Ordered",
            "description": "Optimized location order"
          },
          "summary": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OptimizationSummary"
              }
            ],
            "description": "Route summary"
          },
          "geometry": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OptimizationGeometry"
              }
            ],
            "description": "Route geometry"
          },
          "diagnostics": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OptimizationDiagnostics"
              }
            ],
            "description": "Diagnostics information"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/OptimizationError"
            },
            "type": "array",
            "title": "Errors",
            "description": "Error list"
          }
        },
        "type": "object",
        "required": [
          "objective",
          "units",
          "ordered",
          "summary",
          "geometry",
          "diagnostics"
        ],
        "title": "RouteOptimizationResponse",
        "description": "Route optimization response schema"
      },
      "RouteOptimizeRequest": {
        "properties": {
          "prompt": {
            "type": "string",
            "maxLength": 2000,
            "minLength": 1,
            "title": "Prompt",
            "description": "Instructions for the AI on how to process the route data"
          },
          "data": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "title": "Data",
            "description": "The route data to analyze (stops with coordinates and addresses)"
          },
          "response_structure": {
            "type": "string",
            "maxLength": 1000,
            "minLength": 1,
            "title": "Response Structure",
            "description": "Template/example showing the desired output format"
          }
        },
        "type": "object",
        "required": [
          "prompt",
          "data",
          "response_structure"
        ],
        "title": "RouteOptimizeRequest",
        "description": "Request schema for AI route optimization"
      },
      "RouteOptimizeResponse": {
        "properties": {
          "result": {
            "type": "string",
            "title": "Result",
            "description": "The AI-generated optimized route order"
          },
          "raw_response": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Raw Response",
            "description": "Full OpenAI API response for debugging"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional metadata (tokens used, model used, etc.)"
          }
        },
        "type": "object",
        "required": [
          "result"
        ],
        "title": "RouteOptimizeResponse",
        "description": "Response schema for AI route optimization"
      },
      "RouteOptions": {
        "properties": {
          "avoid_highways": {
            "type": "boolean",
            "title": "Avoid Highways",
            "default": false
          },
          "avoid_tolls": {
            "type": "boolean",
            "title": "Avoid Tolls",
            "default": false
          },
          "additional_options": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Additional Options"
          }
        },
        "type": "object",
        "title": "RouteOptions",
        "description": "Route computation options"
      },
      "RoutePoint": {
        "properties": {
          "lat": {
            "type": "number",
            "maximum": 90.0,
            "minimum": -90.0,
            "title": "Lat"
          },
          "lon": {
            "type": "number",
            "maximum": 180.0,
            "minimum": -180.0,
            "title": "Lon"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "lat",
          "lon"
        ],
        "title": "RoutePoint",
        "description": "Route point schema"
      },
      "RoutePreview": {
        "properties": {
          "total_km": {
            "type": "number",
            "title": "Total Km"
          },
          "total_min": {
            "type": "number",
            "title": "Total Min"
          },
          "geometry": {
            "type": "object",
            "title": "Geometry"
          },
          "legs": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Legs"
          },
          "debug": {
            "type": "object",
            "title": "Debug"
          },
          "preview_token": {
            "type": "string",
            "title": "Preview Token"
          },
          "proposed_order": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Proposed Order",
            "description": "Proposed stop ID order (START..VIA..END)"
          },
          "warnings": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Warnings",
            "description": "Potential issues like long detours"
          }
        },
        "type": "object",
        "required": [
          "total_km",
          "total_min",
          "geometry",
          "legs",
          "debug",
          "preview_token"
        ],
        "title": "RoutePreview",
        "description": "Route preview response"
      },
      "RouteSegment": {
        "properties": {
          "from_point": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutePoint"
              }
            ],
            "description": "Starting point of this segment"
          },
          "to_point": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutePoint"
              }
            ],
            "description": "Ending point of this segment"
          },
          "distance_km": {
            "type": "number",
            "title": "Distance Km",
            "description": "Distance in kilometers"
          },
          "duration_min": {
            "type": "number",
            "title": "Duration Min",
            "description": "Duration in minutes"
          },
          "geometry": {
            "type": "object",
            "title": "Geometry",
            "description": "GeoJSON LineString geometry"
          },
          "instructions": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Instructions",
            "description": "Turn-by-turn instructions"
          },
          "segment_type": {
            "type": "string",
            "title": "Segment Type",
            "description": "Type: start_to_stop, stop_to_stop, or stop_to_end"
          },
          "segment_index": {
            "type": "integer",
            "title": "Segment Index",
            "description": "Order index of this segment"
          }
        },
        "type": "object",
        "required": [
          "from_point",
          "to_point",
          "distance_km",
          "duration_min",
          "geometry",
          "instructions",
          "segment_type",
          "segment_index"
        ],
        "title": "RouteSegment",
        "description": "Individual route segment between two points"
      },
      "RouteVersionList": {
        "properties": {
          "routes": {
            "items": {
              "$ref": "#/components/schemas/RouteVersionSchema"
            },
            "type": "array",
            "title": "Routes"
          }
        },
        "type": "object",
        "required": [
          "routes"
        ],
        "title": "RouteVersionList",
        "description": "Route version list schema"
      },
      "RouteVersionSchema": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "day_id": {
            "type": "string",
            "title": "Day Id"
          },
          "version": {
            "type": "integer",
            "title": "Version"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "is_primary": {
            "type": "boolean",
            "title": "Is Primary"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "profile_used": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Used"
          },
          "total_km": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Km"
          },
          "total_min": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Min"
          },
          "geojson": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Geojson"
          },
          "totals": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Totals"
          },
          "stop_snapshot": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop Snapshot"
          },
          "created_by": {
            "type": "string",
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "legs": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/RouteLegSchema"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Legs"
          }
        },
        "type": "object",
        "required": [
          "id",
          "day_id",
          "version",
          "is_active",
          "is_primary",
          "name",
          "profile_used",
          "total_km",
          "total_min",
          "geojson",
          "totals",
          "stop_snapshot",
          "created_by",
          "created_at",
          "updated_at"
        ],
        "title": "RouteVersionSchema",
        "description": "Route version schema"
      },
      "RouteVersionUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "title": "RouteVersionUpdate"
      },
      "SearchResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/app__api__v1__places__models__PlaceSearchResult"
            },
            "type": "array",
            "title": "Results",
            "description": "Search results"
          },
          "page_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Token",
            "description": "Token for next page"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count",
            "description": "Total available results"
          }
        },
        "type": "object",
        "required": [
          "results"
        ],
        "title": "SearchResponse",
        "description": "Search results response"
      },
      "SequenceOperation": {
        "type": "string",
        "enum": [
          "move_up",
          "move_down",
          "move_to_top",
          "move_to_bottom",
          "insert_after",
          "insert_before",
          "move_to_position"
        ],
        "title": "SequenceOperation",
        "description": "Types of sequence operations"
      },
      "SequenceOperationRequest": {
        "properties": {
          "operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SequenceOperation"
              }
            ],
            "description": "Type of sequence operation"
          },
          "target_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Id",
            "description": "Target item ID (for insert_after/insert_before)"
          },
          "target_position": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Position",
            "description": "Target position (for move_to_position)"
          }
        },
        "type": "object",
        "required": [
          "operation"
        ],
        "title": "SequenceOperationRequest",
        "description": "Request for sequence operation"
      },
      "SequenceOperationResult": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether the operation succeeded"
          },
          "item_id": {
            "type": "string",
            "title": "Item Id",
            "description": "ID of the item that was moved"
          },
          "old_sequence": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Old Sequence",
            "description": "Original sequence number"
          },
          "new_sequence": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "New Sequence",
            "description": "New sequence number"
          },
          "operation": {
            "type": "string",
            "title": "Operation",
            "description": "Operation that was performed"
          },
          "affected_items": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Affected Items",
            "description": "Number of other items affected"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message if operation failed"
          }
        },
        "type": "object",
        "required": [
          "success",
          "item_id",
          "operation"
        ],
        "title": "SequenceOperationResult",
        "description": "Result of sequence operation"
      },
      "SettingsResponse": {
        "properties": {
          "settings": {
            "type": "object",
            "title": "Settings"
          }
        },
        "type": "object",
        "required": [
          "settings"
        ],
        "title": "SettingsResponse"
      },
      "SettingsUpdate": {
        "properties": {
          "show_country_suffix": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Show Country Suffix"
          }
        },
        "type": "object",
        "title": "SettingsUpdate"
      },
      "SortOrder": {
        "type": "string",
        "enum": [
          "relevance",
          "distance",
          "rating",
          "popularity"
        ],
        "title": "SortOrder",
        "description": "Search result sorting options"
      },
      "Stop": {
        "properties": {
          "deleted_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
            "format": "date-time",
            "title": "Deleted At",
            "description": "Soft delete timestamp in UTC (ISO-8601: YYYY-MM-DDTHH:MM:SSZ)",
            "examples": [
              "2024-01-15T10:30:00Z",
              null
            ]
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp in UTC (ISO-8601: YYYY-MM-DDTHH:MM:SSZ)",
            "examples": [
              "2024-01-15T10:30:00Z"
            ]
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update timestamp in UTC (ISO-8601: YYYY-MM-DDTHH:MM:SSZ)",
            "examples": [
              "2024-01-15T10:30:00Z"
            ]
          },
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "Id",
            "description": "Unique identifier (ULID format)",
            "examples": [
              "01K4AHPK4S1KVTYDB5ASTGTM8K"
            ]
          },
          "place_id": {
            "type": "string",
            "title": "Place Id"
          },
          "seq": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Seq"
          },
          "kind": {
            "$ref": "#/components/schemas/StopKind"
          },
          "fixed": {
            "type": "boolean",
            "title": "Fixed",
            "default": false
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "stop_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StopType"
              }
            ],
            "default": "OTHER"
          },
          "arrival_time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{2}:\\d{2}:\\d{2}$",
            "format": "time",
            "title": "Arrival Time",
            "description": "Planned arrival time in ISO-8601 format (HH:MM:SS)",
            "examples": [
              "09:00:00",
              "14:30:00"
            ]
          },
          "departure_time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{2}:\\d{2}:\\d{2}$",
            "format": "time",
            "title": "Departure Time",
            "description": "Planned departure time in ISO-8601 format (HH:MM:SS)",
            "examples": [
              "10:00:00",
              "16:30:00"
            ]
          },
          "duration_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Minutes"
          },
          "booking_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Booking Info"
          },
          "contact_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Info"
          },
          "cost_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Info"
          },
          "priority": {
            "type": "integer",
            "maximum": 5.0,
            "minimum": 1.0,
            "title": "Priority",
            "default": 3
          },
          "day_id": {
            "type": "string",
            "title": "Day Id",
            "description": "ID of the day this stop belongs to",
            "examples": [
              "01K367ED2RPNS2H19J8PQDNXFB"
            ]
          },
          "trip_id": {
            "type": "string",
            "title": "Trip Id",
            "description": "ID of the trip this stop belongs to",
            "examples": [
              "01K367ED2RPNS2H19J8PQDNXFC"
            ]
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "id",
          "place_id",
          "seq",
          "kind",
          "day_id",
          "trip_id"
        ],
        "title": "Stop",
        "description": "Stop schema with standardized ISO-8601 datetime and time fields",
        "examples": [
          {
            "arrival_time": "15:00:00",
            "created_at": "2024-01-15T10:30:00Z",
            "day_id": "01K367ED2RPNS2H19J8PQDNXFB",
            "departure_time": "09:00:00",
            "duration_minutes": 720,
            "fixed": true,
            "id": "01K4AHPK4S1KVTYDB5ASTGTM8K",
            "kind": "start",
            "notes": "Hotel check-in",
            "place_id": "01K367ED2RPNS2H19J8PQDNXFD",
            "priority": 1,
            "seq": 1,
            "stop_type": "ACCOMMODATION",
            "trip_id": "01K367ED2RPNS2H19J8PQDNXFC",
            "updated_at": "2024-01-15T10:30:00Z"
          }
        ],
        "timezone_info": {
          "description": "All datetime fields (created_at, updated_at) are in UTC timezone",
          "format": "ISO-8601 (YYYY-MM-DDTHH:MM:SSZ)",
          "timezone": "UTC"
        }
      },
      "StopBulkReorder": {
        "properties": {
          "reorders": {
            "items": {
              "$ref": "#/components/schemas/StopReorder"
            },
            "type": "array",
            "minItems": 1,
            "title": "Reorders"
          }
        },
        "type": "object",
        "required": [
          "reorders"
        ],
        "title": "StopBulkReorder",
        "description": "Schema for bulk reordering stops"
      },
      "StopCreate": {
        "properties": {
          "place_id": {
            "type": "string",
            "title": "Place Id"
          },
          "seq": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Seq"
          },
          "kind": {
            "$ref": "#/components/schemas/StopKind"
          },
          "fixed": {
            "type": "boolean",
            "title": "Fixed",
            "default": false
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "stop_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StopType"
              }
            ],
            "default": "OTHER"
          },
          "arrival_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "time"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{2}:\\d{2}:\\d{2}$",
            "format": "time",
            "title": "Arrival Time",
            "description": "Planned arrival time in ISO-8601 format (HH:MM:SS)",
            "examples": [
              "09:00:00",
              "14:30:00"
            ]
          },
          "departure_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "time"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{2}:\\d{2}:\\d{2}$",
            "format": "time",
            "title": "Departure Time",
            "description": "Planned departure time in ISO-8601 format (HH:MM:SS)",
            "examples": [
              "10:00:00",
              "16:30:00"
            ]
          },
          "duration_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Minutes"
          },
          "booking_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Booking Info"
          },
          "contact_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Info"
          },
          "cost_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Info"
          },
          "priority": {
            "type": "integer",
            "maximum": 5.0,
            "minimum": 1.0,
            "title": "Priority",
            "default": 3
          }
        },
        "type": "object",
        "required": [
          "place_id",
          "seq",
          "kind"
        ],
        "title": "StopCreate",
        "description": "Schema for creating a stop",
        "examples": [
          {
            "arrival_time": "15:00:00",
            "departure_time": "09:00:00",
            "duration_minutes": 720,
            "fixed": true,
            "kind": "start",
            "notes": "Hotel check-in",
            "place_id": "01K4AHPK4S1KVTYDB5ASTGTM8K",
            "priority": 1,
            "seq": 1,
            "stop_type": "accommodation"
          },
          {
            "arrival_time": "12:30:00",
            "departure_time": "14:00:00",
            "duration_minutes": 90,
            "fixed": false,
            "kind": "via",
            "notes": "Lunch at local restaurant",
            "place_id": "01K4AHPK4S1KVTYDB5ASTGTM8L",
            "priority": 2,
            "seq": 2,
            "stop_type": "food"
          },
          {
            "arrival_time": "15:00:00",
            "departure_time": "17:30:00",
            "duration_minutes": 150,
            "fixed": false,
            "kind": "via",
            "notes": "Visit historic museum",
            "place_id": "01K4AHPK4S1KVTYDB5ASTGTM8M",
            "priority": 1,
            "seq": 3,
            "stop_type": "attraction"
          },
          {
            "arrival_time": "18:00:00",
            "fixed": true,
            "kind": "end",
            "notes": "Evening hotel",
            "place_id": "01K4AHPK4S1KVTYDB5ASTGTM8N",
            "priority": 1,
            "seq": 4,
            "stop_type": "accommodation"
          }
        ]
      },
      "StopKind": {
        "type": "string",
        "enum": [
          "START",
          "VIA",
          "END"
        ],
        "title": "StopKind",
        "description": "Route planning stop types for navigation\n\nDefines the role of a stop in route calculation and optimization.\nUsed by routing algorithms to determine stop order and constraints."
      },
      "StopList": {
        "properties": {
          "stops": {
            "items": {
              "$ref": "#/components/schemas/StopWithPlace"
            },
            "type": "array",
            "title": "Stops"
          }
        },
        "type": "object",
        "required": [
          "stops"
        ],
        "title": "StopList",
        "description": "Legacy stop list schema (optionally includes place info)"
      },
      "StopReorder": {
        "properties": {
          "stop_id": {
            "type": "string",
            "title": "Stop Id"
          },
          "new_seq": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "New Seq"
          }
        },
        "type": "object",
        "required": [
          "stop_id",
          "new_seq"
        ],
        "title": "StopReorder",
        "description": "Schema for reordering stops within a day"
      },
      "StopType": {
        "type": "string",
        "enum": [
          "ACCOMMODATION",
          "FOOD",
          "ATTRACTION",
          "ACTIVITY",
          "SHOPPING",
          "GAS",
          "TRANSPORT",
          "SERVICES",
          "NATURE",
          "CULTURE",
          "NIGHTLIFE",
          "OTHER"
        ],
        "title": "StopType",
        "description": "User-friendly stop categories for trip organization\n\nCategorizes stops by their purpose and type to help with\ntrip planning, filtering, and organization."
      },
      "StopTypeInfo": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/StopType"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "icon": {
            "type": "string",
            "title": "Icon"
          },
          "color": {
            "type": "string",
            "title": "Color"
          }
        },
        "type": "object",
        "required": [
          "type",
          "label",
          "description",
          "icon",
          "color"
        ],
        "title": "StopTypeInfo",
        "description": "Stop type information for UI"
      },
      "StopUpdate": {
        "properties": {
          "place_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Place Id"
          },
          "seq": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Seq"
          },
          "kind": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StopKind"
              },
              {
                "type": "null"
              }
            ]
          },
          "fixed": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fixed"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "stop_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StopType"
              },
              {
                "type": "null"
              }
            ]
          },
          "arrival_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Arrival Time"
          },
          "departure_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Departure Time"
          },
          "duration_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Minutes"
          },
          "booking_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Booking Info"
          },
          "contact_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Info"
          },
          "cost_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Info"
          },
          "priority": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 5.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority"
          }
        },
        "type": "object",
        "title": "StopUpdate",
        "description": "Schema for updating a stop"
      },
      "StopWithPlace": {
        "properties": {
          "deleted_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
            "format": "date-time",
            "title": "Deleted At",
            "description": "Soft delete timestamp in UTC (ISO-8601: YYYY-MM-DDTHH:MM:SSZ)",
            "examples": [
              "2024-01-15T10:30:00Z",
              null
            ]
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp in UTC (ISO-8601: YYYY-MM-DDTHH:MM:SSZ)",
            "examples": [
              "2024-01-15T10:30:00Z"
            ]
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update timestamp in UTC (ISO-8601: YYYY-MM-DDTHH:MM:SSZ)",
            "examples": [
              "2024-01-15T10:30:00Z"
            ]
          },
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "Id",
            "description": "Unique identifier (ULID format)",
            "examples": [
              "01K4AHPK4S1KVTYDB5ASTGTM8K"
            ]
          },
          "place_id": {
            "type": "string",
            "title": "Place Id"
          },
          "seq": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Seq"
          },
          "kind": {
            "$ref": "#/components/schemas/StopKind"
          },
          "fixed": {
            "type": "boolean",
            "title": "Fixed",
            "default": false
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "stop_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StopType"
              }
            ],
            "default": "OTHER"
          },
          "arrival_time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{2}:\\d{2}:\\d{2}$",
            "format": "time",
            "title": "Arrival Time",
            "description": "Planned arrival time in ISO-8601 format (HH:MM:SS)",
            "examples": [
              "09:00:00",
              "14:30:00"
            ]
          },
          "departure_time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{2}:\\d{2}:\\d{2}$",
            "format": "time",
            "title": "Departure Time",
            "description": "Planned departure time in ISO-8601 format (HH:MM:SS)",
            "examples": [
              "10:00:00",
              "16:30:00"
            ]
          },
          "duration_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Minutes"
          },
          "booking_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Booking Info"
          },
          "contact_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Info"
          },
          "cost_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Info"
          },
          "priority": {
            "type": "integer",
            "maximum": 5.0,
            "minimum": 1.0,
            "title": "Priority",
            "default": 3
          },
          "day_id": {
            "type": "string",
            "title": "Day Id",
            "description": "ID of the day this stop belongs to",
            "examples": [
              "01K367ED2RPNS2H19J8PQDNXFB"
            ]
          },
          "trip_id": {
            "type": "string",
            "title": "Trip Id",
            "description": "ID of the trip this stop belongs to",
            "examples": [
              "01K367ED2RPNS2H19J8PQDNXFC"
            ]
          },
          "place": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Place"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "id",
          "place_id",
          "seq",
          "kind",
          "day_id",
          "trip_id"
        ],
        "title": "StopWithPlace",
        "description": "Stop schema with place information included",
        "examples": [
          {
            "arrival_time": "15:00:00",
            "created_at": "2024-01-15T10:30:00Z",
            "day_id": "01K367ED2RPNS2H19J8PQDNXFB",
            "departure_time": "09:00:00",
            "duration_minutes": 720,
            "fixed": true,
            "id": "01K4AHPK4S1KVTYDB5ASTGTM8K",
            "kind": "start",
            "notes": "Hotel check-in",
            "place_id": "01K367ED2RPNS2H19J8PQDNXFD",
            "priority": 1,
            "seq": 1,
            "stop_type": "ACCOMMODATION",
            "trip_id": "01K367ED2RPNS2H19J8PQDNXFC",
            "updated_at": "2024-01-15T10:30:00Z"
          }
        ],
        "timezone_info": {
          "description": "All datetime fields (created_at, updated_at) are in UTC timezone",
          "format": "ISO-8601 (YYYY-MM-DDTHH:MM:SSZ)",
          "timezone": "UTC"
        }
      },
      "StopsSummary": {
        "properties": {
          "trip_id": {
            "type": "string",
            "title": "Trip Id"
          },
          "total_stops": {
            "type": "integer",
            "title": "Total Stops"
          },
          "by_type": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "By Type",
            "description": "Count of stops by type (accommodation, food, attraction, etc.)"
          },
          "days": {
            "type": "integer",
            "title": "Days",
            "description": "Count of active days in the trip"
          }
        },
        "type": "object",
        "required": [
          "trip_id",
          "total_stops",
          "by_type",
          "days"
        ],
        "title": "StopsSummary",
        "description": "Schema for trip stops summary"
      },
      "SuggestResponse": {
        "properties": {
          "session_token": {
            "type": "string",
            "title": "Session Token",
            "description": "Session token for this response"
          },
          "suggestions": {
            "items": {
              "$ref": "#/components/schemas/PlaceSuggestion"
            },
            "type": "array",
            "title": "Suggestions",
            "description": "Suggestion results"
          }
        },
        "type": "object",
        "required": [
          "session_token",
          "suggestions"
        ],
        "title": "SuggestResponse",
        "description": "Type-ahead suggestions response"
      },
      "Trip": {
        "properties": {
          "deleted_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
            "format": "date-time",
            "title": "Deleted At",
            "description": "Soft delete timestamp in UTC (ISO-8601: YYYY-MM-DDTHH:MM:SSZ)",
            "examples": [
              "2024-01-15T10:30:00Z",
              null
            ]
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp in UTC (ISO-8601: YYYY-MM-DDTHH:MM:SSZ)",
            "examples": [
              "2024-01-15T10:30:00Z"
            ]
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update timestamp in UTC (ISO-8601: YYYY-MM-DDTHH:MM:SSZ)",
            "examples": [
              "2024-01-15T10:30:00Z"
            ]
          },
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "Id",
            "description": "Unique identifier (ULID format)",
            "examples": [
              "01K4AHPK4S1KVTYDB5ASTGTM8K"
            ]
          },
          "slug": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Slug"
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Title"
          },
          "destination": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Destination"
          },
          "start_date": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "format": "date",
            "title": "Start Date",
            "description": "Trip start date in ISO-8601 format (YYYY-MM-DD)",
            "examples": [
              "2024-07-15",
              "2024-12-25"
            ]
          },
          "timezone": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Timezone",
            "description": "Trip timezone (IANA timezone database format)",
            "examples": [
              "UTC",
              "America/New_York",
              "Europe/London"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TripStatus"
              }
            ],
            "default": "active"
          },
          "is_published": {
            "type": "boolean",
            "title": "Is Published",
            "default": false
          },
          "created_by": {
            "type": "string",
            "title": "Created By",
            "description": "ID of the user who created this trip",
            "examples": [
              "01K367ED2RPNS2H19J8PQDNXFB"
            ]
          },
          "members": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/TripMember"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Members"
          },
          "created_by_user": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TripCreator"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "id",
          "slug",
          "title",
          "created_by"
        ],
        "title": "Trip",
        "description": "Trip schema with standardized ISO-8601 datetime fields",
        "examples": [
          {
            "created_at": "2024-01-15T10:30:00Z",
            "created_by": "01K367ED2RPNS2H19J8PQDNXFB",
            "destination": "California, USA",
            "id": "01K4AHPK4S1KVTYDB5ASTGTM8K",
            "is_published": false,
            "slug": "summer-road-trip-2024",
            "start_date": "2024-07-15",
            "status": "active",
            "timezone": "America/Los_Angeles",
            "title": "Summer Road Trip 2024",
            "updated_at": "2024-01-15T10:30:00Z"
          }
        ],
        "timezone_info": {
          "description": "All datetime fields (created_at, updated_at, deleted_at) are in UTC timezone",
          "format": "ISO-8601 (YYYY-MM-DDTHH:MM:SSZ)",
          "timezone": "UTC"
        }
      },
      "TripCompleteResponse": {
        "properties": {
          "trip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Trip"
              }
            ],
            "description": "Complete trip information"
          },
          "days": {
            "items": {
              "$ref": "#/components/schemas/DayWithAllStops"
            },
            "type": "array",
            "title": "Days",
            "description": "All days ordered by sequence with their stops"
          },
          "summary": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TripSummary"
              }
            ],
            "description": "Trip summary statistics"
          }
        },
        "type": "object",
        "required": [
          "trip",
          "days",
          "summary"
        ],
        "title": "TripCompleteResponse",
        "description": "Complete trip response with all days and stops included",
        "examples": [
          {
            "days": [
              {
                "calculated_date": "2024-07-15",
                "has_route": true,
                "id": "01K4J0CYB3YSGWDZB9N92V3ZQ5",
                "rest_day": false,
                "seq": 1,
                "status": "active",
                "stops": [
                  {
                    "id": "01K4J0CYB3YSGWDZB9N92V3ZQ6",
                    "kind": "start",
                    "place": {
                      "address": "123 Main St, Tel Aviv",
                      "latitude": 32.0853,
                      "longitude": 34.7818,
                      "name": "Grand Hotel"
                    },
                    "seq": 1,
                    "stop_type": "ACCOMMODATION"
                  }
                ],
                "stops_count": 3,
                "trip_id": "01K4J0CYB3YSGWDZB9N92V3ZQ4"
              }
            ],
            "summary": {
              "status_breakdown": {
                "active": 2,
                "completed": 0
              },
              "stop_type_breakdown": {
                "ACCOMMODATION": 2,
                "ATTRACTION": 1,
                "RESTAURANT": 1
              },
              "total_days": 2,
              "total_stops": 4,
              "trip_duration_days": 7
            },
            "trip": {
              "created_at": "2024-01-15T10:30:00Z",
              "created_by_user": {
                "email": "user@example.com",
                "id": "01K4J0CYB3YSGWDZB9N92V3ZQ3",
                "name": "John Doe"
              },
              "destination": "Israel",
              "id": "01K4J0CYB3YSGWDZB9N92V3ZQ4",
              "is_published": false,
              "slug": "summer-road-trip-2024",
              "start_date": "2024-07-15",
              "status": "active",
              "timezone": "Asia/Jerusalem",
              "title": "Summer Road Trip 2024",
              "updated_at": "2024-01-15T10:30:00Z"
            }
          }
        ]
      },
      "TripCreate": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Title",
            "description": "Trip title (required)"
          },
          "destination": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Destination",
            "description": "Trip destination (optional)"
          },
          "start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "format": "date",
            "title": "Start Date",
            "description": "Trip start date in ISO-8601 format (YYYY-MM-DD) - optional",
            "examples": [
              "2024-07-15",
              "2024-12-25"
            ]
          },
          "timezone": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Timezone",
            "description": "Trip timezone (IANA timezone database format) - optional, defaults to UTC",
            "examples": [
              "UTC",
              "America/New_York",
              "Europe/London"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TripStatus"
              }
            ],
            "description": "Trip status (defaults to 'draft')",
            "default": "draft"
          },
          "is_published": {
            "type": "boolean",
            "title": "Is Published",
            "description": "Whether the trip is published (defaults to false)",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "title"
        ],
        "title": "TripCreate",
        "description": "Schema for creating a trip with ISO-8601 date standardization"
      },
      "TripCreateResponse": {
        "properties": {
          "trip": {
            "$ref": "#/components/schemas/Trip"
          },
          "next_steps": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Next Steps"
          },
          "suggestions": {
            "type": "object",
            "title": "Suggestions"
          }
        },
        "type": "object",
        "required": [
          "trip",
          "next_steps",
          "suggestions"
        ],
        "title": "TripCreateResponse",
        "description": "Enhanced trip creation response with next steps"
      },
      "TripCreator": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "display_name"
        ],
        "title": "TripCreator",
        "description": "Trip creator user info"
      },
      "TripList": {
        "properties": {
          "trips": {
            "items": {
              "$ref": "#/components/schemas/Trip"
            },
            "type": "array",
            "title": "Trips"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          }
        },
        "type": "object",
        "required": [
          "trips",
          "total",
          "page",
          "size"
        ],
        "title": "TripList",
        "description": "Legacy trip list response schema (deprecated)"
      },
      "TripMember": {
        "properties": {
          "role": {
            "$ref": "#/components/schemas/TripMemberRole"
          },
          "invited_email": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Invited Email"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "trip_id": {
            "type": "string",
            "title": "Trip Id"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "status": {
            "$ref": "#/components/schemas/TripMemberStatus"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "role",
          "id",
          "trip_id",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "TripMember",
        "description": "Trip member schema"
      },
      "TripMemberRole": {
        "type": "string",
        "enum": [
          "owner",
          "editor",
          "viewer"
        ],
        "title": "TripMemberRole",
        "description": "Trip collaboration roles and permissions\n\nDefines the level of access and permissions for trip members\nin collaborative trip planning scenarios."
      },
      "TripMemberStatus": {
        "type": "string",
        "enum": [
          "active",
          "pending",
          "removed"
        ],
        "title": "TripMemberStatus",
        "description": "Trip member invitation and participation status\n\nTracks the current state of a user's membership in a trip,\nfrom invitation through active participation."
      },
      "TripShort": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Trip ID"
          },
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "Trip URL slug"
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Trip title"
          },
          "destination": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Destination",
            "description": "Trip destination"
          },
          "start_date": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Date",
            "description": "Trip start date in ISO-8601 format"
          },
          "timezone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timezone",
            "description": "Trip timezone"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TripStatus"
              }
            ],
            "description": "Trip status"
          },
          "is_published": {
            "type": "boolean",
            "title": "Is Published",
            "description": "Whether trip is published"
          },
          "created_by": {
            "type": "string",
            "title": "Created By",
            "description": "User ID who created the trip"
          },
          "members": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Members",
            "description": "List of member user IDs"
          },
          "total_days": {
            "type": "integer",
            "title": "Total Days",
            "description": "Total number of days in the trip"
          },
          "days": {
            "items": {
              "$ref": "#/components/schemas/DaySummary"
            },
            "type": "array",
            "title": "Days",
            "description": "Day summaries with start/end status and stop counts"
          }
        },
        "type": "object",
        "required": [
          "id",
          "slug",
          "title",
          "status",
          "is_published",
          "created_by",
          "total_days",
          "days"
        ],
        "title": "TripShort",
        "description": "Short trip format with basic info and day summaries",
        "examples": [
          {
            "created_by": "01K5P68329YFSCTV777EB4GM9P",
            "days": [
              {
                "day": 1,
                "end": true,
                "start": true,
                "stops": 4
              },
              {
                "day": 2,
                "end": true,
                "start": true,
                "stops": 3
              },
              {
                "day": 3,
                "end": true,
                "start": true,
                "stops": 2
              }
            ],
            "destination": "Europe",
            "id": "01K5RPT2HKFSMBAEDXKJ7K8E99",
            "is_published": false,
            "members": [],
            "slug": "summer-road-trip-2024",
            "start_date": "2024-07-15",
            "status": "active",
            "timezone": "Europe/London",
            "title": "Summer Road Trip 2024",
            "total_days": 3
          }
        ]
      },
      "TripShortResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TripShort"
            },
            "type": "array",
            "title": "Data",
            "description": "List of trips in short format"
          },
          "meta": {
            "type": "object",
            "title": "Meta",
            "description": "Pagination metadata"
          },
          "links": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Links",
            "description": "Pagination links"
          }
        },
        "type": "object",
        "required": [
          "data",
          "meta",
          "links"
        ],
        "title": "TripShortResponse",
        "description": "Response for short format trip listing",
        "examples": [
          {
            "data": [
              {
                "created_by": "01K5P68329YFSCTV777EB4GM9P",
                "days": [
                  {
                    "day": 1,
                    "end": true,
                    "start": true,
                    "stops": 4
                  },
                  {
                    "day": 2,
                    "end": true,
                    "start": true,
                    "stops": 3
                  }
                ],
                "destination": "Europe",
                "id": "01K5RPT2HKFSMBAEDXKJ7K8E99",
                "is_published": false,
                "members": [],
                "slug": "summer-road-trip-2024",
                "start_date": "2024-07-15",
                "status": "active",
                "timezone": "Europe/London",
                "title": "Summer Road Trip 2024",
                "total_days": 2
              }
            ],
            "links": {
              "first": "/trips?page=1",
              "last": "/trips?page=1"
            },
            "meta": {
              "current_page": 1,
              "per_page": 20,
              "total_items": 1,
              "total_pages": 1
            }
          }
        ]
      },
      "TripStatus": {
        "type": "string",
        "enum": [
          "draft",
          "active",
          "completed",
          "archived"
        ],
        "title": "TripStatus",
        "description": "Trip planning and execution status\n\nRepresents the current state of a trip throughout its lifecycle,\nfrom initial planning to completion and archival."
      },
      "TripSummary": {
        "properties": {
          "total_days": {
            "type": "integer",
            "title": "Total Days",
            "description": "Total number of days in the trip"
          },
          "total_stops": {
            "type": "integer",
            "title": "Total Stops",
            "description": "Total number of stops across all days"
          },
          "trip_duration_days": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trip Duration Days",
            "description": "Duration of the trip in days"
          },
          "status_breakdown": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Status Breakdown",
            "description": "Count of days by status"
          },
          "stop_type_breakdown": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Stop Type Breakdown",
            "description": "Count of stops by type"
          }
        },
        "type": "object",
        "required": [
          "total_days",
          "total_stops"
        ],
        "title": "TripSummary",
        "description": "Summary statistics for a trip"
      },
      "TripUpdate": {
        "properties": {
          "slug": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "destination": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Destination"
          },
          "start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
            "format": "date",
            "title": "Start Date",
            "description": "Trip start date in ISO-8601 format (YYYY-MM-DD)",
            "examples": [
              "2024-07-15",
              "2024-12-25"
            ]
          },
          "timezone": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Timezone",
            "description": "Trip timezone (IANA timezone database format)",
            "examples": [
              "UTC",
              "America/New_York",
              "Europe/London"
            ]
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TripStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "is_published": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Published"
          }
        },
        "type": "object",
        "title": "TripUpdate",
        "description": "Schema for updating a trip with ISO-8601 date standardization"
      },
      "Units": {
        "type": "string",
        "enum": [
          "metric",
          "imperial"
        ],
        "title": "Units",
        "description": "Units enumeration"
      },
      "UserProfile": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "status": {
            "type": "string",
            "title": "Status"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "display_name",
          "status"
        ],
        "title": "UserProfile",
        "description": "User profile schema"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VehicleProfile": {
        "type": "string",
        "enum": [
          "car",
          "bike",
          "foot"
        ],
        "title": "VehicleProfile",
        "description": "Vehicle profile enumeration"
      },
      "app__api__v1__places__models__PlaceSearchResult": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique place identifier"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Place name"
          },
          "formatted_address": {
            "type": "string",
            "title": "Formatted Address",
            "description": "Human-readable address"
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/PlaceType"
            },
            "type": "array",
            "title": "Types",
            "description": "Place type categories"
          },
          "center": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Coordinates"
              }
            ],
            "description": "Geographic center point"
          },
          "bbox": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BoundingBox"
              },
              {
                "type": "null"
              }
            ],
            "description": "Bounding box if available"
          },
          "categories": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Categories",
            "description": "Detailed categories"
          },
          "score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Score",
            "description": "Relevance score 0-1"
          },
          "timezone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timezone",
            "description": "IANA timezone identifier"
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PlaceMetadata"
              },
              {
                "type": "null"
              }
            ],
            "description": "Additional metadata"
          },
          "geometry_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GeometryType"
              },
              {
                "type": "null"
              }
            ],
            "description": "Coordinate precision"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "formatted_address",
          "center",
          "score"
        ],
        "title": "PlaceSearchResult",
        "description": "Full search result with complete details"
      },
      "app__schemas__place__PlaceSearchResult": {
        "properties": {
          "places": {
            "items": {
              "$ref": "#/components/schemas/PlaceSearchItem"
            },
            "type": "array",
            "title": "Places"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": [
          "places",
          "total"
        ],
        "title": "PlaceSearchResult",
        "description": "Legacy place search result schema"
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter your Bearer token in the format: Bearer <token>"
      }
    },
    "examples": {
      "AppLoginExample": {
        "summary": "Simple app login request",
        "value": {
          "email": "user@example.com",
          "password": "user_password"
        }
      },
      "AppLoginSuccessResponse": {
        "summary": "Successful app login response",
        "value": {
          "authenticated": true,
          "user_id": "01K5P68329YFSCTV777EB4GM9P",
          "message": "Authentication successful"
        }
      },
      "AppLoginFailureResponse": {
        "summary": "Failed app login response",
        "value": {
          "authenticated": false,
          "user_id": null,
          "message": "Invalid email or password"
        }
      },
      "TripCreateExample": {
        "summary": "Create a new trip",
        "value": {
          "title": "Israel Adventure",
          "destination": "Israel",
          "start_date": "2024-06-15",
          "timezone": "Asia/Jerusalem"
        }
      },
      "DayDeleteExample": {
        "summary": "Soft delete a day with cascade",
        "value": {
          "status": "DELETED"
        }
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Development server"
    },
    {
      "url": "https://mytrips-api.bahar.co.il",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Authentication and user management (including new app-login endpoint)"
    },
    {
      "name": "trips",
      "description": "Trip creation and management with enhanced validation"
    },
    {
      "name": "days",
      "description": "Day-by-day trip planning and organization with soft delete support"
    },
    {
      "name": "stops",
      "description": "Comprehensive stops management with 12 categories and soft delete"
    },
    {
      "name": "places",
      "description": "Place search and geocoding with aggressive caching"
    },
    {
      "name": "routing",
      "description": "Intelligent routing with hybrid GraphHopper integration"
    },
    {
      "name": "settings",
      "description": "User settings and preferences"
    },
    {
      "name": "ai",
      "description": "AI-powered route optimization and suggestions"
    }
  ]
}