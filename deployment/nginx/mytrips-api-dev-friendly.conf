# MyTrips API Nginx Configuration - Development Friendly
# This configuration is optimized for frontend development with localhost origins

server {
    listen 80;
    server_name mytrips-api.bahar.co.il;

    # Logging
    access_log /var/log/nginx/mytrips-api_access.log;
    error_log /var/log/nginx/mytrips-api_error.log;

    # Remove any CORS headers from backend to avoid conflicts
    proxy_hide_header Access-Control-Allow-Origin;
    proxy_hide_header Access-Control-Allow-Methods;
    proxy_hide_header Access-Control-Allow-Headers;
    proxy_hide_header Access-Control-Allow-Credentials;

    # Global CORS configuration
    set $cors_origin "";
    set $cors_methods "GET, POST, PUT, PATCH, DELETE, OPTIONS";
    set $cors_headers "Authorization, Content-Type, Accept, X-Requested-With";

    # Allow specific localhost origins for development
    if ($http_origin ~* "^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$") {
        set $cors_origin $http_origin;
    }

    # Allow production domains
    if ($http_origin ~* "^https?://(.*\.)?bahar\.co\.il$") {
        set $cors_origin $http_origin;
    }

    # Fallback to wildcard for other cases
    if ($cors_origin = "") {
        set $cors_origin "*";
    }

    # Handle preflight requests
    location ~ ^/(.*)$ {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods $cors_methods always;
            add_header Access-Control-Allow-Headers $cors_headers always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Max-Age 86400 always;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }

        # Proxy to backend
        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Add CORS headers for actual requests
        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Methods $cors_methods always;
        add_header Access-Control-Allow-Headers $cors_headers always;
        add_header Access-Control-Allow-Credentials true always;

        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
}

# HTTPS server (will be configured by certbot)
server {
    listen 443 ssl;
    server_name mytrips-api.bahar.co.il;

    # SSL configuration will be added by certbot

    # Logging
    access_log /var/log/nginx/mytrips-api_access.log;
    error_log /var/log/nginx/mytrips-api_error.log;

    # Remove any CORS headers from backend to avoid conflicts
    proxy_hide_header Access-Control-Allow-Origin;
    proxy_hide_header Access-Control-Allow-Methods;
    proxy_hide_header Access-Control-Allow-Headers;
    proxy_hide_header Access-Control-Allow-Credentials;

    # Global CORS configuration
    set $cors_origin "";
    set $cors_methods "GET, POST, PUT, PATCH, DELETE, OPTIONS";
    set $cors_headers "Authorization, Content-Type, Accept, X-Requested-With";

    # Allow specific localhost origins for development
    if ($http_origin ~* "^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$") {
        set $cors_origin $http_origin;
    }

    # Allow production domains
    if ($http_origin ~* "^https?://(.*\.)?bahar\.co\.il$") {
        set $cors_origin $http_origin;
    }

    # Fallback to wildcard for other cases
    if ($cors_origin = "") {
        set $cors_origin "*";
    }

    # Handle preflight requests
    location ~ ^/(.*)$ {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods $cors_methods always;
            add_header Access-Control-Allow-Headers $cors_headers always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Max-Age 86400 always;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }

        # Proxy to backend
        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Add CORS headers for actual requests
        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Methods $cors_methods always;
        add_header Access-Control-Allow-Headers $cors_headers always;
        add_header Access-Control-Allow-Credentials true always;

        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
}
